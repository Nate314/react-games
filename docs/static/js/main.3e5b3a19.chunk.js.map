{"version":3,"sources":["assets/sky58.png","assets/bird.png","assets/ground.png","assets/pipe.png","Utility.tsx","Snake.tsx","FloatyStars.tsx","Music.tsx","FlappyFinch.tsx","GameOfLife.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Utility","Object","classCallCheck","this","array","length","item","Array","fill","setTitle","game","document","title","concat","isOdd","num","isEven","arePositionsEqual","p1","p2","squareSize","Board","props","_this","possibleConstructorReturn","getPrototypeOf","call","snakeHeadColor","snakeBodyColor","foodColor","boardColor","_this2","squareColors","map","v","rowindex","columnindex","color","snakeBody","forEach","bodyPart","food","snakeHead","onEat","maxWidth","Math","floor","window","innerWidth","maxHeight","innerHeight","min","react_default","a","createElement","row","className","key","style","backgroundColor","width","height","React","Component","ScoreBoard","_this3","score","paused","gameover","highscore","GameState","snakeDirection","snakeHeadPosition","boardHeight","foodPosition","boardWidth","snakeLength","gameTickInterval","SnakeGame","_this4","gameTickDelta","snakeLengthDelta","scoreDelta","currentDirection","interval","state","keyDown","e","setState","k","includes","clearInterval","setInterval","gameTick","tempState","_this5","dir","_state$snakeHeadPosit","slicedToArray","y","x","push","slice","i","hs","localStorage","getItem","newHighScore","Number","setItem","JSON","stringify","addEventListener","_this6","random","isFoodInBody","_this7","isNaN","Snake_Board","eatFood","Snake_ScoreBoard","numberOfStars","maxSpeed","frameInterval","FloatyStarsState","starLocations","starVelocities","FloatyStars","animate","starLocation","filter","star","top","left","MusicState","audio","Audio","play","Music","url","sky58Image","require","birdImage","groundImage","pipeImage","flapVelocity","mp3FlapUrl","colliding","object","bird","horizontalCollision","leftObject","rightObject","leftBird","verticalCollision","isPipe","topPipeBottom","pipeYGap","bottomPipeTop","topBird","bottomBird","topObject","bottomObject","NomNomProps","NomNom","position","nomNomSize","PipeProps","index","birdPosition","BirdProps","onNomNom","Pipe","nomNomEaten","nomNomProps","topPipeTop","pipeWidth","FlappyFinch_NomNom","src","transform","Bird","FlappyFinchGameState","pipePositions","birdVelocity","collision","currentPipeToCheck","shouldDing","flapWhenOdd","groundX","skyX","FlappyFinchGame","randomPipePosition","restart","lshs","pipe","incrementScore","max","apply","toConsumableArray","pos","_ref","ding","flap","pipes","FlappyFinch_Pipe","gamestatus","ground","textAlign","fontSize","background","scoreboard","onClick","shouldPlayFlapSound","src_Music","FlappyFinch_Bird","livingColor","squares","square","alive","clicked","Square","neighbors","gametick","GameOfLife","flat","console","log","livingSquares","livingSquare","count","xIndex","yIndex","countNeighbors","clickedSquare","find","GameOfLife_Board","action","instruction","cursor","href","Boolean","location","hostname","match","Game","reactcomponent","undefined","games","Index","react_router_dom","to","App","basename","react_router","path","exact","component","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e5b3a19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sky58.c122d050.png\";","module.exports = __webpack_public_path__ + \"static/media/bird.2288acff.png\";","module.exports = __webpack_public_path__ + \"static/media/ground.d63f9713.png\";","module.exports = __webpack_public_path__ + \"static/media/pipe.85a093a0.png\";","\r\nexport class Utility {\r\n    // returns an array filled with the specified item with the specified length\r\n    static array = (length: number, item?: any): any[] => Array(length).fill(item ? item : null)\r\n    // sets the title of the document\r\n    static setTitle = (game: string) => document.title = `Nate314 | react-games | ${game}`;\r\n    // returns true if num passed is odd\r\n    static isOdd = (num: number): boolean => num % 2 === 1;\r\n    // returns true if num passed is even\r\n    static isEven = (num: number): boolean => !Utility.isOdd(num);\r\n    // returns true if the first two numbers in both arrays are equal to each other\r\n    static arePositionsEqual = (p1: number[], p2: number[]) => p1[0] === p2[0] && p1[1] === p2[1];\r\n}\r\n","import React from 'react';\r\nimport './Snake.css';\r\nimport { Utility } from './Utility';\r\n\r\nconst boardWidth = 30;\r\nconst boardHeight = 20;\r\nlet squareSize = 0;\r\nconst randomPosition = () => [Math.floor(Math.random() * boardHeight), Math.floor(Math.random() * boardWidth)];\r\n\r\nclass BoardProps {\r\n    snakeBody: number[][] = [];\r\n    snakeHead: number[] = [];\r\n    food: number[] = [];\r\n    onEat: any;\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    snakeHeadColor = 'blue';\r\n    snakeBodyColor = 'green';\r\n    foodColor = 'red';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Utility.array(boardHeight).map((v, rowindex) =>\r\n            Utility.array(boardWidth).map((v, columnindex) => {\r\n                let color;\r\n                this.props.snakeBody.forEach(bodyPart => {\r\n                    if (Utility.arePositionsEqual(bodyPart, [rowindex, columnindex]))\r\n                        color = this.snakeBodyColor;\r\n                });\r\n                if (Utility.arePositionsEqual(this.props.food, [rowindex, columnindex]))\r\n                    color = this.foodColor;\r\n                else if (Utility.arePositionsEqual(this.props.snakeHead, [rowindex, columnindex]))\r\n                    color = this.snakeHeadColor;\r\n                else if (!color)\r\n                    color = this.boardColor;\r\n                return color;\r\n            })\r\n        );\r\n        // trigger onEat event if the head is on top of food\r\n        if (Utility.arePositionsEqual(this.props.snakeHead, this.props.food)) this.props.onEat();\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Utility.array(boardHeight).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Utility.array(boardWidth).map((row, columnindex) =>\r\n                                    <div className=\"snakesquare\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={\r\n                                            {backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`}\r\n                                        }>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ScoreBoardProps {\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n}\r\n\r\nclass ScoreBoard extends React.Component {\r\n\r\n    props: ScoreBoardProps;\r\n\r\n    constructor(props: ScoreBoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"snakesquare\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        Score: {this.props.score}\r\n                    </div>\r\n                    <div className=\"snakesquare\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        {\r\n                            this.props.paused ?\r\n                            <div style={{color:'green'}}><b>Paused</b></div>\r\n                            : this.props.gameover ?\r\n                            <div style={{color:'red'}}><b>Game Over</b></div>\r\n                            : `High Score: ${this.props.highscore}`\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"snakesquare\" style={{width: `${boardWidth * (squareSize)}px`}}>\r\n                        (r) Reset | (WASD, Arrow Keys) move snake | (esc) Escape\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    score: number = 0;\r\n    snakeDirection: string = '>';\r\n    snakeHeadPosition: number[] = [boardHeight / 2, 3];\r\n    snakeBody: number[][] = [];\r\n    foodPosition: number[] = [boardHeight / 2, boardWidth / 2];\r\n    snakeLength: number = 1;\r\n    gameTickInterval: number = 110;\r\n}\r\n\r\nexport default class SnakeGame extends React.Component {\r\n\r\n    gameTickDelta: number = 0;\r\n    snakeLengthDelta: number = 3;\r\n    scoreDelta: number = 5;\r\n    currentDirection: string;\r\n    interval: any;\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('Snake');\r\n        const tempState = new GameState();\r\n        this.state = tempState;\r\n        this.currentDirection = this.state.snakeDirection;\r\n        this.setState(tempState);\r\n        this.interval = setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    gameTick() {\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused && !state.gameover) {\r\n                // move snake in direction set by keyDown method\r\n                const dir = state.snakeDirection;\r\n                this.currentDirection = dir;\r\n                let [y, x] = state.snakeHeadPosition;\r\n                state.snakeBody.push([y, x]);\r\n                x = dir === '<' ? x - 1 : dir === '>' ? x + 1 : x;\r\n                y = dir === '^' ? y - 1 : dir === 'v' ? y + 1 : y;\r\n                // check for collisions and set new positions\r\n                if (y < 0 || y > boardHeight - 1 || x < 0 || x > boardWidth - 1) {\r\n                    state.gameover = true;\r\n                } else {\r\n                    state.snakeHeadPosition = [y, x];\r\n                    state.snakeBody = Utility.array(state.snakeBody.length, [-1, -1]).concat(state.snakeBody);\r\n                    state.snakeBody = state.snakeBody.slice(state.snakeBody.length - state.snakeLength);\r\n                    state.snakeBody.forEach((bodyPart, i) => {\r\n                        if (Utility.arePositionsEqual(bodyPart, state.snakeHeadPosition)) state.gameover = true;\r\n                    });\r\n                }\r\n                if (state.gameover) {\r\n                    const hs = localStorage.getItem('nate314.snake.highScore');\r\n                    let newHighScore = true;\r\n                    if (hs && Number(hs) > state.score) newHighScore = false;\r\n                    if (newHighScore) {\r\n                        localStorage.setItem('nate314.snake.highScore', JSON.stringify(state.score));\r\n                    }\r\n                }\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        this.setState((state: GameState) => {\r\n            const k = e.key;\r\n            // set the direction based on the key pressed\r\n            state.snakeDirection =\r\n                !['^', 'v'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowUp' || k === 'W' || k === 'w') ? '^' :\r\n                    (k === 'ArrowDown' || k === 'S' || k === 's') ? 'v' : this.currentDirection) :\r\n                !['<', '>'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowLeft' || k === 'A' || k === 'a') ? '<' :\r\n                    (k === 'ArrowRight' || k === 'D' || k === 'd') ? '>' : this.currentDirection)\r\n                : this.currentDirection;\r\n            if (k === 'Escape') state.paused = !state.paused;\r\n            if (['r', 'R'].includes(k)) {\r\n                clearInterval(this.interval);\r\n                state = new GameState();\r\n                this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    eatFood() {\r\n        this.setState((state: GameState) => {\r\n            // move food and increment the snake's length\r\n            while (true) {\r\n                state.foodPosition = randomPosition();\r\n                let isFoodInBody = false;\r\n                state.snakeBody.forEach(bodyPart => {\r\n                    if (Utility.arePositionsEqual(state.foodPosition, bodyPart)) isFoodInBody = true;\r\n                });\r\n                if (!isFoodInBody) break;\r\n            }\r\n            state.snakeLength += this.snakeLengthDelta;\r\n            state.score += this.scoreDelta;\r\n            state.gameTickInterval -= this.gameTickDelta;\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let highscore = Number(localStorage.getItem('nate314.snake.highScore'));\r\n        highscore = isNaN(highscore) ? 0 : highscore;\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board\r\n                    snakeBody={this.state.snakeBody}\r\n                    snakeHead={this.state.snakeHeadPosition}\r\n                    food={this.state.foodPosition}\r\n                    onEat={() => this.eatFood()}\r\n                />\r\n                <ScoreBoard\r\n                    score={this.state.score}\r\n                    highscore={highscore}\r\n                    paused={this.state.paused}\r\n                    gameover={this.state.gameover}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './FloatyStars.css';\r\nimport { Utility } from './Utility';\r\n\r\nconst numberOfStars = 100;\r\nconst starSize = 10;\r\nconst maxSpeed = 1;\r\nconst frameInterval = 10;\r\n\r\nclass FloatyStarsState {\r\n    starLocations: number[][] = [];\r\n    starVelocities: number[][] = [];\r\n}\r\n\r\nexport default class FloatyStars extends React.Component {\r\n\r\n    state: FloatyStarsState;\r\n    props: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('FloatyStars');\r\n        this.props = props;\r\n        this.state = new FloatyStarsState();\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        Utility.array(numberOfStars).forEach(() => {\r\n            this.state.starLocations.push([Math.random() * width, Math.random() * height]);\r\n            this.state.starVelocities.push([Math.random() * maxSpeed, Math.random() * maxSpeed]);\r\n        });\r\n        this.setState(this.state);\r\n        setInterval(() => {\r\n            this.animate();\r\n        }, frameInterval);\r\n    }\r\n\r\n    animate() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState((state: FloatyStarsState) => {\r\n            let i = 0;\r\n            state.starLocations.forEach(starLocation => {\r\n                starLocation[0] -= state.starVelocities[i][0];\r\n                starLocation[1] += state.starVelocities[i][1];\r\n                if (!((starLocation[0] < width + starSize && starLocation[0] > -2 * starSize))) {\r\n                    starLocation[0] = width + starSize;\r\n                }\r\n                if (!((starLocation[1] < height + starSize && starLocation[1] > -2 * starSize))) {\r\n                    starLocation[1] = -starSize;\r\n                }\r\n                i++;\r\n            });\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        return (\r\n            <div className=\"sky\">\r\n                {\r\n                    this.state.starLocations\r\n                    .filter(star => (star[0] < width && star[0] > 0) && (star[1] < height && star[1] > 0))\r\n                    .map(starLocation =>\r\n                            <div className=\"snow\"\r\n                                style={{\r\n                                    top: `${starLocation[1]}px`, left: `${starLocation[0]}px`,\r\n                                    width: `${starSize}px`, height: `${starSize}px`\r\n                                }}>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nclass MusicProps {\r\n    url: string = '';\r\n    play: boolean = false;\r\n}\r\n\r\nclass MusicState {\r\n    audio: HTMLAudioElement = new Audio('');\r\n    play: boolean = false;\r\n}\r\n\r\nclass Music extends React.Component {\r\n    state: MusicState;\r\n    props: MusicProps;\r\n\r\n    constructor(props: MusicProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = new MusicState();\r\n        this.state.audio = new Audio(this.props.url);\r\n        this.setState(this.state);\r\n    }\r\n  \r\n    // togglePlay = () => {\r\n            // this.setState({ play: !this.state.play }, () => {\r\n            //     this.state.play ? this.state.audio.play() : this.state.audio.pause();\r\n            //   });\r\n    // }\r\n  \r\n    render() {\r\n        if (this.props.play) {\r\n            this.state.audio.play()\r\n        }\r\n        return (\r\n            <div>\r\n            {/* <button onClick={() => console.log}>{this.state.play ? 'Pause' : 'Play'}</button> */}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  export default Music;\r\n","import React from 'react';\r\nimport './FlappyFinch.css';\r\nimport Music from './Music';\r\nimport { Utility } from './Utility';\r\n// const getImage = (url: string) => true ? `.${require(url)}` : `${require(url)}`;\r\nconst prefix = '.';\r\nconst sky58Image = `${prefix}${require('./assets/sky58.png')}`;\r\nconst birdImage = `${prefix}${require('./assets/bird.png')}`;\r\nconst groundImage = `${prefix}${require('./assets/ground.png')}`;\r\nconst pipeImage = `${prefix}${require('./assets/pipe.png')}`;\r\n\r\nconst frameInterval = 10;\r\nconst pipeXGap = 300;\r\nconst pipeYGap = 250;  \r\nconst pipeWidth = 100;\r\nconst gravityConstant = 0.15;\r\nconst flapVelocity = -6.25;\r\nconst birdSize = 40;\r\nconst nomNomSize = 10;\r\nconst mp3DingUrl = 'https://freesound.org/data/previews/341/341695_5858296-lq.mp3';\r\nconst mp3FlapUrl = 'https://freesound.org/data/previews/244/244980_3008343-lq.mp3';\r\n\r\nconst colliding = (object: {x: number, y: number, width: number, height: number, isPipe: boolean}, bird: BirdProps) => {\r\n    // calculate horizontal collision\r\n    let horizontalCollision = false;\r\n    const leftObject = object.x;\r\n    const rightObject = object.x + pipeWidth;\r\n    const leftBird = bird.x;\r\n    const rightBird = bird.x + birdSize;\r\n    if (rightBird > leftObject && leftBird < rightObject) horizontalCollision = true;\r\n    // calculate vertical collision\r\n    let verticalCollision = false;\r\n    if (object.isPipe) {\r\n        const halfGap = pipeYGap / 2;\r\n        const topPipeBottom = object.y - halfGap;\r\n        const bottomPipeTop = object.y + halfGap;\r\n        const topBird = bird.y;\r\n        const bottomBird = bird.y + birdSize;\r\n        if (topBird < topPipeBottom || bottomBird > bottomPipeTop) verticalCollision = true;\r\n    } else {\r\n        const topObject = object.y;\r\n        const bottomObject = object.y + object.height;\r\n        const topBird = bird.y;\r\n        const bottomBird = bird.y + birdSize;\r\n        if (bottomBird > topObject && topBird < bottomObject) verticalCollision = true;\r\n    }\r\n    // bird and pipe are colliding if both horizontal and vertical collision occur\r\n    return horizontalCollision && verticalCollision;\r\n};\r\n\r\nclass NomNomProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n}\r\n\r\nclass NomNom extends React.Component {\r\n\r\n    props: NomNomProps;\r\n\r\n    constructor(props: NomNomProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        const halfNomNomSize = nomNomSize / 2;\r\n        return (\r\n            <div>\r\n                <div className=\"nomnom\" style={{position:'absolute',\r\n                    width:`${nomNomSize}px`, height:`${nomNomSize}px`,\r\n                    top:`${this.props.y - halfNomNomSize}px`,\r\n                    left:`${this.props.x}px`}}>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nclass PipeProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    index: number = 0;\r\n    birdPosition: BirdProps = new BirdProps(0, 0);\r\n    onNomNom: any;\r\n    constructor(x: number, y: number, index: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nclass Pipe extends React.Component {\r\n\r\n    nomNomEaten: boolean = false;\r\n    nomNomProps: NomNomProps;\r\n    props: PipeProps;\r\n\r\n    constructor(props: PipeProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.nomNomProps = new NomNomProps();\r\n    }\r\n\r\n    render() {\r\n        const height = window.innerHeight;\r\n        const halfGap = pipeYGap / 2;\r\n        const topPipeTop = (this.props.y - height) - halfGap;\r\n        const bottomPipeTop = this.props.y + halfGap;\r\n        this.nomNomProps.x = this.props.x + (pipeWidth / 2);\r\n        if (this.nomNomProps.y === 0) {\r\n            const topPipeBottom = topPipeTop + height;\r\n            this.nomNomProps.y = topPipeBottom + (Math.random() * (bottomPipeTop - topPipeBottom));\r\n        }\r\n        const object = {\r\n            x: this.nomNomProps.x,\r\n            y: this.nomNomProps.y,\r\n            width: nomNomSize,\r\n            height: nomNomSize,\r\n            isPipe: false\r\n        };\r\n        if (!this.nomNomEaten && colliding(object, this.props.birdPosition)) {\r\n            this.props.onNomNom();\r\n            this.nomNomEaten = true;\r\n        }\r\n        return (\r\n            <div>\r\n                {this.nomNomEaten ? '' : <NomNom x={this.nomNomProps.x} y={this.nomNomProps.y}/>}\r\n                <img className=\"pipe\" src={pipeImage} style={{ transform:'scale(-1, -1)',\r\n                    top:`${topPipeTop}px`, left:`${this.props.x}px`, width:`${pipeWidth}px`}}></img>\r\n                <img className=\"pipe\" src={pipeImage} style={{ transform:'scale(-1, 1)',\r\n                    top:`${bottomPipeTop}px`, left:`${this.props.x}px`, width:`${pipeWidth}px`}}></img>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nclass BirdProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nclass Bird extends React.Component {\r\n\r\n    props: BirdProps;\r\n\r\n    constructor(props: BirdProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img className=\"bird\" src={birdImage}\r\n                style={{left:`${this.props.x}px`, top:`${this.props.y}px`,\r\n                        width:`${birdSize}px`, height:`${birdSize}px`}}></img>\r\n        )\r\n    };\r\n}\r\n\r\nclass FlappyFinchGameState {\r\n    pipePositions: PipeProps[] = [];\r\n    birdPosition: BirdProps = new BirdProps(120, 0);\r\n    birdVelocity: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    collision: boolean = false;\r\n    currentPipeToCheck: number = 1;\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    shouldDing: boolean = false;\r\n    flapWhenOdd: number = 0;\r\n    groundX: number = 0;\r\n    skyX: number = 0;\r\n}\r\n\r\nexport default class FlappyFinchGame extends React.Component {\r\n    randomPipePosition = () => (window.innerHeight / 2) + ((Math.random() - 0.5) * (window.innerHeight / 2));\r\n\r\n    state: FlappyFinchGameState;\r\n    props: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('FlappyFinch');\r\n        this.props = props;\r\n        this.state = new FlappyFinchGameState();\r\n        this.restart();\r\n        setInterval(() => {\r\n            if (!this.state.paused && !this.state.gameover) {\r\n                this.animate();\r\n            }\r\n        }, frameInterval);\r\n    }\r\n\r\n    restart() {\r\n        this.state = new FlappyFinchGameState();\r\n        const lshs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n        if (!lshs) {\r\n            localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(0));\r\n        }\r\n        this.state.highscore = lshs ? Number(lshs) : 0;\r\n        let x = 3 * pipeXGap;\r\n        let index = 1;\r\n        Utility.array(10).forEach(() => {\r\n            this.state.pipePositions.push(new PipeProps(x, this.randomPipePosition(), index));\r\n            x += pipeXGap;\r\n            index++;\r\n        });\r\n        this.setState(this.state);\r\n    }\r\n\r\n    keyDown = (e: any | ' ' | 'Escape' | 'r') => {\r\n        this.setState((state: FlappyFinchGameState) => {\r\n            const k = typeof e === typeof ' ' ? e : e.key;\r\n            switch (k) {\r\n                case ' ':\r\n                    state.birdVelocity = flapVelocity;\r\n                    state.flapWhenOdd++;\r\n                    break;\r\n                case 'Escape':\r\n                    state.paused = !state.paused;\r\n                    break;\r\n                case 'r':\r\n                case 'R':\r\n                    this.restart();\r\n                    break;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    incrementScore() {\r\n        this.state.score++;\r\n        const lshs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n        if (Number(lshs) < this.state.score) {\r\n            this.state.highscore = this.state.score;\r\n            localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(this.state.highscore));\r\n        }\r\n    }\r\n\r\n    animate() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState((state: FlappyFinchGameState) => {\r\n            state.birdPosition.y += state.birdVelocity;\r\n            state.birdVelocity += gravityConstant;\r\n            state.pipePositions.forEach(pipe => {\r\n                if (state.currentPipeToCheck === pipe.index) {\r\n                    if (pipe.x + pipeWidth < this.state.birdPosition.x) {\r\n                        state.currentPipeToCheck++;\r\n                        this.incrementScore();\r\n                    }\r\n                    const object = {\r\n                        x: pipe.x, y: pipe.y,\r\n                        width: pipeWidth, height: height,\r\n                        isPipe: true\r\n                    };\r\n                    state.gameover = colliding(object, this.state.birdPosition);\r\n                }\r\n                if (pipe.index < state.currentPipeToCheck - 1) {\r\n                    pipe.index = Math.max(...state.pipePositions.map(pos => pos.index)) + 1;\r\n                    pipe.x = Math.max(...state.pipePositions.map(pos => pos.x)) + pipeXGap;\r\n                    pipe.y = this.randomPipePosition();\r\n                }\r\n                pipe.x -= 1;\r\n            });\r\n            [state.groundX, state.skyX] = [state.groundX -1, state.skyX - 0.5];\r\n            if (state.groundX < -width * 0.625) {\r\n                state.groundX = 0;\r\n            }\r\n            if (state.skyX < -width * 0.5) {\r\n                state.skyX = 0;\r\n            }\r\n            if (state.birdPosition.y > height - (birdSize + 50)) {\r\n                state.gameover = true;\r\n            } else if (state.birdPosition.y < 0) {\r\n                state.birdPosition.y = 0;\r\n            }\r\n            const hs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n            let newHighScore = true;\r\n            if (hs && Number(hs) > state.score) newHighScore = false;\r\n            if (newHighScore) {\r\n                localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(state.score));\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    nomNomEaten(): void {\r\n        this.incrementScore();\r\n        this.state.shouldDing = true;\r\n    }\r\n \r\n    render() {\r\n        const ding = this.state.shouldDing;\r\n        const flap = this.state.flapWhenOdd;\r\n        this.state.shouldDing = false\r\n        this.state.flapWhenOdd += Utility.isOdd(this.state.flapWhenOdd) ? 1 : 0;\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        const pipes = this.state.pipePositions.map((pipe, i) => \r\n            <Pipe key={`pipe${i}`}\r\n                x={pipe.x} y={pipe.y} index={pipe.index}\r\n                birdPosition={this.state.birdPosition} onNomNom={() => this.nomNomEaten()}/>\r\n        );\r\n        const gamestatus = (this.state.paused || this.state.gameover || this.state.collision) ?\r\n            <div className=\"paused\">{this.state.gameover ? 'GAME OVER' : 'PAUSED'}</div> : '';\r\n        const ground = Utility.array(5).map((v, i) =>\r\n            <img key={`background${i}`}\r\n                className=\"ground\" src={groundImage}\r\n                style={{top:`${height - 50}px`, left:`${this.state.groundX + (i * width * 0.625)}px`, height:'50px',\r\n                color:'white', textAlign:'left', fontSize:'20px'}}></img>\r\n        );\r\n        const background = Utility.array(5).map((v, i) =>\r\n            <img key={`background${i}`}\r\n                className=\"background\" src={sky58Image}\r\n                style={{left: `${10 + this.state.skyX + (i * width * 0.5)}px`}}></img>\r\n        );\r\n        const scoreboard = <div className=\"scoreboard\">\r\n                &nbsp;&nbsp;&nbsp;Score:&nbsp;{this.state.score}\r\n                <br />\r\n                &nbsp;&nbsp;&nbsp;High Score:&nbsp;{this.state.highscore}\r\n                <br />\r\n                &nbsp;&nbsp;&nbsp;\r\n                <span onClick={() => this.keyDown('r')}>\r\n                    (r) Reset\r\n                </span>\r\n                &nbsp;|&nbsp;\r\n                <span onClick={() => this.keyDown('Escape')}>\r\n                    (Escape) Pause\r\n                </span>\r\n                &nbsp;|&nbsp;\r\n                <span>\r\n                    (Space) Flap\r\n                </span>\r\n            </div>;\r\n        const shouldPlayFlapSound = (i: number) => Utility.isOdd(flap)\r\n            ? (this.state.paused || this.state.gameover\r\n                ? false : Math.floor(flap / 2) % 4 === i)\r\n            : false;\r\n        return (\r\n            <div className=\"game\" onClick={() => this.keyDown(' ')}>\r\n                {background}\r\n                <Music url={mp3DingUrl} play={ding}/>\r\n                {/* Allows flap sound to be played multiple times */}\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(0)}/>\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(1)}/>\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(2)}/>\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(3)}/>\r\n                {/* Allows flap sound to be played multiple times */}\r\n                <Bird x={this.state.birdPosition.x} y={this.state.birdPosition.y}/>\r\n                {pipes}\r\n                {gamestatus}\r\n                {ground}\r\n                {scoreboard}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './GameOfLife.css';\r\nimport { Utility } from './Utility';\r\n\r\n// calculate the size of the squares so that the board fills most of the screen\r\n//  and the max length is the measurement of the longer edge\r\nconst maxLength = 35;\r\nconst boardWidth = Math.floor(window.innerWidth > window.innerHeight ? maxLength\r\n    : (window.innerWidth / window.innerHeight) * maxLength);\r\nconst boardHeight = Math.floor(window.innerHeight > window.innerWidth ? maxLength\r\n    : (window.innerHeight / window.innerWidth) * maxLength);\r\nlet squareSize = 0;\r\n\r\nclass BoardProps {\r\n    squares: Square[] = [];\r\n    clicked: any;\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    livingColor = 'green';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Utility.array(boardHeight).map((v, rowindex) =>\r\n            Utility.array(boardWidth).map((v, columnindex) => {\r\n                let color;\r\n                this.props.squares.forEach(square => {\r\n                    if (square.alive && Utility.arePositionsEqual([square.y, square.x], [rowindex, columnindex]))\r\n                        color = this.livingColor;\r\n                });\r\n                return color ? color : this.boardColor;\r\n            })\r\n        );\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Utility.array(boardHeight).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Utility.array(boardWidth).map((row, columnindex) =>\r\n                                    <div className=\"gameoflifesquare\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={{\r\n                                            backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`\r\n                                        }} onClick={() => this.props.clicked(rowindex, columnindex)}>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Square {\r\n    x: number;\r\n    y: number;\r\n    alive: boolean;\r\n    neighbors: number;\r\n    constructor(x: number, y: number, alive: boolean, neighbors: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.alive = alive;\r\n        this.neighbors = neighbors;\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    paused: boolean = false;\r\n    gametick: boolean = false;\r\n    squares: Square[] = [];\r\n    gameTickInterval: number = 250;\r\n}\r\n\r\nexport default class GameOfLife extends React.Component {\r\n\r\n    gameTickDelta: number = 0;\r\n    snakeLengthDelta: number = 3;\r\n    scoreDelta: number = 5;\r\n    interval: any;\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('Game of Life');\r\n        const tempState = new GameState();\r\n        tempState.squares = Utility.array(boardWidth).map((v, x) =>\r\n            Utility.array(boardHeight).map((v, y) => new Square(x, y, false, 0))\r\n        ).flat();\r\n        this.state = tempState;\r\n        this.setState(tempState);\r\n        this.keyDown('r');\r\n        this.interval = setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    gameTick() {\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused || state.gametick) {\r\n                console.log('tick');\r\n                // count neighbors of a square\r\n                const countNeighbors = (livingSquare: Square, livingSquares: Square[]) => {\r\n                    let count = 0;\r\n                    [-1, 0, 1].forEach(xIndex => {\r\n                        [-1, 0, 1].forEach(yIndex => {\r\n                            if ((xIndex !== 0 || yIndex !== 0)\r\n                                && livingSquares.filter(square =>\r\n                                    square.x === livingSquare.x + xIndex\r\n                                    && square.y === livingSquare.y + yIndex).length > 0\r\n                                ) count++;\r\n                        });\r\n                    });\r\n                    return count;\r\n                }\r\n                // count the neighbors of all squares\r\n                const livingSquares = state.squares.filter(square => square.alive);\r\n                state.squares = state.squares.map(square => { square.neighbors = 0; return square; });\r\n                state.squares.forEach(square => {\r\n                    square.neighbors = countNeighbors(square, livingSquares);\r\n                });\r\n                // apply the rules from wikipedia https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\r\n                state.squares.map(square => {\r\n                    // 1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n                    // 2. Any live cell with two or three live neighbours lives on to the next generation.\r\n                    // 3. Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n                    // 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n                    square.alive = square.alive\r\n                        ? !(square.neighbors < 2 || square.neighbors > 3)\r\n                        : square.neighbors === 3;\r\n                    return square;\r\n                });\r\n                state.gametick = false;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        const k = e && e.key ? e.key : e;\r\n        switch (k) {\r\n            case 'Escape':\r\n                this.state.paused = !this.state.paused;\r\n                break;\r\n            case 'r':\r\n            case 'R':\r\n                this.state.squares.map(square => {\r\n                    square.alive = Math.random() < 0.5;\r\n                    return square;\r\n                });\r\n                break;\r\n            case 'c':\r\n            case 'C':\r\n            case 'a':\r\n            case 'A':\r\n                this.state.squares.map(square => {\r\n                    square.alive = k === 'a' || k === 'A';\r\n                    return square;\r\n                });\r\n                break;\r\n            case ' ':\r\n            case 'Space':\r\n                this.state.gametick = true;\r\n                this.gameTick();\r\n                break;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    clicked(rowindex: number, columnindex: number) {\r\n        this.setState((state: GameState) => {\r\n            const clickedSquare = state.squares.find(square => square.y === rowindex && square.x === columnindex);\r\n            if (clickedSquare) clickedSquare.alive = !clickedSquare.alive;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board\r\n                    squares={this.state.squares}\r\n                    clicked={(rowindex: number, columnindex: number) => this.clicked(rowindex, columnindex)}/>\r\n                <div className=\"gameoflifesquare\" style={{width: `${boardWidth * squareSize}px`}}>\r\n                {\r\n                    [\r\n                        {'key': 'Escape', 'action': 'Play/Pause'},\r\n                        {'key': 'r', 'action': 'Random'},\r\n                        {'key': 'c', 'action': 'Clear All'},\r\n                        {'key': 'a', 'action': 'Fill All'},\r\n                        {'key': 'Space', 'action': 'next generation'}\r\n                    ].map((instruction, i) =>\r\n                        <span style={{cursor:'pointer'}} onClick={() => this.keyDown(instruction.key)}>\r\n                            ({instruction.key}) {instruction.action} {i < 4 ? '| ' : ''}\r\n                        </span>\r\n                    )\r\n                }\r\n                </div>\r\n                <div className=\"gameoflifesquare\" style={{width: `${boardWidth * squareSize}px`}}>\r\n                    Learn more on&nbsp;\r\n                    <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">wikipedia</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    BrowserRouter as Router,\r\n    Route, Link\r\n} from 'react-router-dom';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SnakeGame from './Snake';\r\nimport FloatyStars from './FloatyStars';\r\nimport FlappyFinchGame from './FlappyFinch';\r\nimport GameOfLife from './GameOfLife';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst production = true;\r\n\r\nclass Game {\r\n    title: string = '';\r\n    url: string = '';\r\n    reactcomponent: any = undefined;\r\n    constructor(title: string, url: string, reactcomponent: any) {\r\n        this.title = title;\r\n        this.url = url;\r\n        this.reactcomponent = reactcomponent;\r\n    }\r\n}\r\n\r\nconst games = [\r\n    new Game('Snake', '/snake', SnakeGame),\r\n    new Game('FloatyStars', '/floatystars', FloatyStars),\r\n    new Game('FlappyFinch', '/flappyfinch', FlappyFinchGame),\r\n    new Game('GameOfLife', '/gameoflife', GameOfLife)\r\n]\r\n\r\nclass Index extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                I have written a few games here to learn <a href=\"https://reactjs.org/\">reactjs</a>.\r\n                Listed below are the games that I have written in order.\r\n                <br />\r\n                {\r\n                    games.map(game =>\r\n                        <div key=\"game.title\">\r\n                            <Link to={game.url}>{game.title}</Link>\r\n                            <br />\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router basename={production ? '/react-games/' : '/'}>\r\n                <Route path=\"/\" exact component={Index} />\r\n                {\r\n                    games.map(game =>\r\n                        <Route key={game.url} path={game.url} exact component={game.reactcomponent} />\r\n                    )\r\n                }\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}