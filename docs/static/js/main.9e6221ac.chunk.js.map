{"version":3,"sources":["serviceWorker.ts","Utility.tsx","games/Snake.tsx","games/FloatyStars.tsx","Music.tsx","games/FlappyFinch.tsx","games/GameOfLife.tsx","games/Tetris.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Utility","Object","classCallCheck","this","array","length","item","Array","fill","setTitle","game","document","title","concat","isOdd","num","isEven","arePositionsEqual","p1","p2","squareSize","Board","props","_this","possibleConstructorReturn","getPrototypeOf","call","snakeHeadColor","snakeBodyColor","foodColor","boardColor","_this2","squareColors","map","v","rowindex","columnindex","color","snakeBody","forEach","bodyPart","food","snakeHead","onEat","maxWidth","Math","floor","innerWidth","maxHeight","innerHeight","min","react_default","a","createElement","row","className","key","style","backgroundColor","width","height","React","Component","ScoreBoard","_this3","score","paused","gameover","highscore","GameState","snakeDirection","snakeHeadPosition","boardHeight","foodPosition","boardWidth","snakeLength","gameTickInterval","SnakeGame","_this4","gameTickDelta","snakeLengthDelta","scoreDelta","currentDirection","interval","state","keyDown","e","setState","k","includes","clearInterval","setInterval","gameTick","tempState","_this5","dir","_state$snakeHeadPosit","slicedToArray","y","x","push","slice","i","hs","localStorage","getItem","newHighScore","Number","setItem","JSON","stringify","addEventListener","_this6","random","isFoodInBody","_this7","isNaN","Snake_Board","eatFood","Snake_ScoreBoard","numberOfStars","maxSpeed","frameInterval","FloatyStarsState","starLocations","starVelocities","FloatyStars","animate","starLocation","filter","star","top","left","MusicState","audio","Audio","play","Music","url","flapVelocity","mp3FlapUrl","colliding","object","bird","horizontalCollision","leftObject","rightObject","leftBird","verticalCollision","isPipe","topPipeBottom","pipeYGap","bottomPipeTop","topBird","bottomBird","topObject","bottomObject","NomNomProps","NomNom","position","nomNomSize","PipeProps","index","birdPosition","BirdProps","onNomNom","Pipe","nomNomEaten","nomNomProps","topPipeTop","pipeWidth","FlappyFinch_NomNom","src","transform","Bird","FlappyFinchGameState","pipePositions","birdVelocity","collision","currentPipeToCheck","shouldDing","flapWhenOdd","groundX","skyX","FlappyFinchGame","randomPipePosition","restart","lshs","pipe","incrementScore","max","apply","toConsumableArray","pos","_ref","ding","flap","pipes","FlappyFinch_Pipe","gamestatus","ground","textAlign","fontSize","background","scoreboard","onClick","shouldPlayFlapSound","src_Music","FlappyFinch_Bird","livingColor","squares","square","alive","clicked","Square","neighbors","gametick","GameOfLife","flat","console","log","livingSquares","livingSquare","count","xIndex","yIndex","countNeighbors","clickedSquare","find","GameOfLife_Board","action","instruction","cursor","href","piece","blob","currentPiece","positionsEqual","s","sq","Tetris","movePiece","direction","valid","pendingPosition","repaint","rotatePiece","clockwise","minX","minY","moveToOrigin","to","currentPieceAtOrigin","indecies","p","rotated","matrix","newIndex","rotate","inc","arr","asdf","movePieceDown","addNewPiece","result","potentialState","parse","potentialBlobPart","pieceWillCollide","fullRows","_loop","getFullRows","convertPieceToBlob","fullRowIndecies","indexOf","emptyRowIndex","removeFullRows","colors","c","getRandomPiece","Tetris_Board","Game","image","gif","reactcomponent","undefined","games","GameCard","_useState","useState","_useState2","isHover","setIsHover","Card","elevation","onMouseEnter","onMouseLeave","CardActionArea","CardMedia","CardActions","Typography","gutterBottom","variant","component","Button","size","pathname","Index","updateDimensions","componentDidMount","componentWillUnmount","removeEventListener","columnClass","CardContent","App","react_router_dom","basename","react_router","path","exact","g","getElementsByTagName","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e6221ac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nexport class Utility {\r\n    // returns an array filled with the specified item with the specified length\r\n    static array = (length: number, item?: any): any[] => Array(length).fill(item ? item : null)\r\n    // sets the title of the document\r\n    static setTitle = (game: string) => document.title = `Nate314 | react-games | ${game}`;\r\n    // returns true if num passed is odd\r\n    static isOdd = (num: number): boolean => num % 2 === 1;\r\n    // returns true if num passed is even\r\n    static isEven = (num: number): boolean => !Utility.isOdd(num);\r\n    // returns true if the first two numbers in both arrays are equal to each other\r\n    static arePositionsEqual = (p1: number[], p2: number[]) => p1[0] === p2[0] && p1[1] === p2[1];\r\n}\r\n","import React from 'react';\r\nimport './Snake.css';\r\nimport { Utility } from '../Utility';\r\n\r\nconst boardWidth = 30;\r\nconst boardHeight = 20;\r\nlet squareSize = 0;\r\nconst randomPosition = () => [Math.floor(Math.random() * boardHeight), Math.floor(Math.random() * boardWidth)];\r\n\r\nclass BoardProps {\r\n    snakeBody: number[][] = [];\r\n    snakeHead: number[] = [];\r\n    food: number[] = [];\r\n    onEat: any;\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    snakeHeadColor = 'blue';\r\n    snakeBodyColor = 'green';\r\n    foodColor = 'red';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Utility.array(boardHeight).map((v, rowindex) =>\r\n            Utility.array(boardWidth).map((v, columnindex) => {\r\n                let color;\r\n                this.props.snakeBody.forEach(bodyPart => {\r\n                    if (Utility.arePositionsEqual(bodyPart, [rowindex, columnindex]))\r\n                        color = this.snakeBodyColor;\r\n                });\r\n                if (Utility.arePositionsEqual(this.props.food, [rowindex, columnindex]))\r\n                    color = this.foodColor;\r\n                else if (Utility.arePositionsEqual(this.props.snakeHead, [rowindex, columnindex]))\r\n                    color = this.snakeHeadColor;\r\n                else if (!color)\r\n                    color = this.boardColor;\r\n                return color;\r\n            })\r\n        );\r\n        // trigger onEat event if the head is on top of food\r\n        if (Utility.arePositionsEqual(this.props.snakeHead, this.props.food)) this.props.onEat();\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Utility.array(boardHeight).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Utility.array(boardWidth).map((row, columnindex) =>\r\n                                    <div className=\"snakesquare\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={\r\n                                            {backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`}\r\n                                        }>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ScoreBoardProps {\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n}\r\n\r\nclass ScoreBoard extends React.Component {\r\n\r\n    props: ScoreBoardProps;\r\n\r\n    constructor(props: ScoreBoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"snakesquare\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        Score: {this.props.score}\r\n                    </div>\r\n                    <div className=\"snakesquare\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        {\r\n                            this.props.paused ?\r\n                            <div style={{color:'green'}}><b>Paused</b></div>\r\n                            : this.props.gameover ?\r\n                            <div style={{color:'red'}}><b>Game Over</b></div>\r\n                            : `High Score: ${this.props.highscore}`\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"snakesquare\" style={{width: `${boardWidth * (squareSize)}px`}}>\r\n                        (r) Reset | (WASD, Arrow Keys) move snake | (esc) Escape\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    score: number = 0;\r\n    snakeDirection: string = '>';\r\n    snakeHeadPosition: number[] = [boardHeight / 2, 3];\r\n    snakeBody: number[][] = [];\r\n    foodPosition: number[] = [boardHeight / 2, boardWidth / 2];\r\n    snakeLength: number = 1;\r\n    gameTickInterval: number = 110;\r\n}\r\n\r\nexport default class SnakeGame extends React.Component {\r\n\r\n    gameTickDelta: number = 0;\r\n    snakeLengthDelta: number = 3;\r\n    scoreDelta: number = 5;\r\n    currentDirection: string;\r\n    interval: any;\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('Snake');\r\n        const tempState = new GameState();\r\n        this.state = tempState;\r\n        this.currentDirection = this.state.snakeDirection;\r\n        this.setState(tempState);\r\n        this.interval = setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    gameTick() {\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused && !state.gameover) {\r\n                // move snake in direction set by keyDown method\r\n                const dir = state.snakeDirection;\r\n                this.currentDirection = dir;\r\n                let [y, x] = state.snakeHeadPosition;\r\n                state.snakeBody.push([y, x]);\r\n                x = dir === '<' ? x - 1 : dir === '>' ? x + 1 : x;\r\n                y = dir === '^' ? y - 1 : dir === 'v' ? y + 1 : y;\r\n                // check for collisions and set new positions\r\n                if (y < 0 || y > boardHeight - 1 || x < 0 || x > boardWidth - 1) {\r\n                    state.gameover = true;\r\n                } else {\r\n                    state.snakeHeadPosition = [y, x];\r\n                    state.snakeBody = Utility.array(state.snakeBody.length, [-1, -1]).concat(state.snakeBody);\r\n                    state.snakeBody = state.snakeBody.slice(state.snakeBody.length - state.snakeLength);\r\n                    state.snakeBody.forEach((bodyPart, i) => {\r\n                        if (Utility.arePositionsEqual(bodyPart, state.snakeHeadPosition)) state.gameover = true;\r\n                    });\r\n                }\r\n                if (state.gameover) {\r\n                    const hs = localStorage.getItem('nate314.snake.highScore');\r\n                    let newHighScore = true;\r\n                    if (hs && Number(hs) > state.score) newHighScore = false;\r\n                    if (newHighScore) {\r\n                        localStorage.setItem('nate314.snake.highScore', JSON.stringify(state.score));\r\n                    }\r\n                }\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        this.setState((state: GameState) => {\r\n            const k = e.key;\r\n            // set the direction based on the key pressed\r\n            state.snakeDirection =\r\n                !['^', 'v'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowUp' || k === 'W' || k === 'w') ? '^' :\r\n                    (k === 'ArrowDown' || k === 'S' || k === 's') ? 'v' : this.currentDirection) :\r\n                !['<', '>'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowLeft' || k === 'A' || k === 'a') ? '<' :\r\n                    (k === 'ArrowRight' || k === 'D' || k === 'd') ? '>' : this.currentDirection)\r\n                : this.currentDirection;\r\n            if (k === 'Escape') state.paused = !state.paused;\r\n            if (['r', 'R'].includes(k)) {\r\n                clearInterval(this.interval);\r\n                state = new GameState();\r\n                this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    eatFood() {\r\n        this.setState((state: GameState) => {\r\n            // move food and increment the snake's length\r\n            while (true) {\r\n                state.foodPosition = randomPosition();\r\n                let isFoodInBody = false;\r\n                state.snakeBody.forEach(bodyPart => {\r\n                    if (Utility.arePositionsEqual(state.foodPosition, bodyPart)) isFoodInBody = true;\r\n                });\r\n                if (!isFoodInBody) break;\r\n            }\r\n            state.snakeLength += this.snakeLengthDelta;\r\n            state.score += this.scoreDelta;\r\n            state.gameTickInterval -= this.gameTickDelta;\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let highscore = Number(localStorage.getItem('nate314.snake.highScore'));\r\n        highscore = isNaN(highscore) ? 0 : highscore;\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board\r\n                    snakeBody={this.state.snakeBody}\r\n                    snakeHead={this.state.snakeHeadPosition}\r\n                    food={this.state.foodPosition}\r\n                    onEat={() => this.eatFood()}\r\n                />\r\n                <ScoreBoard\r\n                    score={this.state.score}\r\n                    highscore={highscore}\r\n                    paused={this.state.paused}\r\n                    gameover={this.state.gameover}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './FloatyStars.css';\r\nimport { Utility } from '../Utility';\r\n\r\nconst numberOfStars = 100;\r\nconst starSize = 10;\r\nconst maxSpeed = 1;\r\nconst frameInterval = 10;\r\n\r\nclass FloatyStarsState {\r\n    starLocations: number[][] = [];\r\n    starVelocities: number[][] = [];\r\n}\r\n\r\nexport default class FloatyStars extends React.Component {\r\n\r\n    state: FloatyStarsState;\r\n    props: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('FloatyStars');\r\n        this.props = props;\r\n        this.state = new FloatyStarsState();\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        Utility.array(numberOfStars).forEach(() => {\r\n            this.state.starLocations.push([Math.random() * width, Math.random() * height]);\r\n            this.state.starVelocities.push([Math.random() * maxSpeed, Math.random() * maxSpeed]);\r\n        });\r\n        this.setState(this.state);\r\n        setInterval(() => {\r\n            this.animate();\r\n        }, frameInterval);\r\n    }\r\n\r\n    animate() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState((state: FloatyStarsState) => {\r\n            let i = 0;\r\n            state.starLocations.forEach(starLocation => {\r\n                starLocation[0] -= state.starVelocities[i][0];\r\n                starLocation[1] += state.starVelocities[i][1];\r\n                if (!((starLocation[0] < width + starSize && starLocation[0] > -2 * starSize))) {\r\n                    starLocation[0] = width + starSize;\r\n                }\r\n                if (!((starLocation[1] < height + starSize && starLocation[1] > -2 * starSize))) {\r\n                    starLocation[1] = -starSize;\r\n                }\r\n                i++;\r\n            });\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        return (\r\n            <div className=\"sky\">\r\n                {\r\n                    this.state.starLocations\r\n                    .filter(star => (star[0] < width && star[0] > 0) && (star[1] < height && star[1] > 0))\r\n                    .map(starLocation =>\r\n                            <div className=\"snow\"\r\n                                style={{\r\n                                    top: `${starLocation[1]}px`, left: `${starLocation[0]}px`,\r\n                                    width: `${starSize}px`, height: `${starSize}px`\r\n                                }}>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nclass MusicProps {\r\n    url: string = '';\r\n    play: boolean = false;\r\n}\r\n\r\nclass MusicState {\r\n    audio: HTMLAudioElement = new Audio('');\r\n    play: boolean = false;\r\n}\r\n\r\nclass Music extends React.Component {\r\n    state: MusicState;\r\n    props: MusicProps;\r\n\r\n    constructor(props: MusicProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = new MusicState();\r\n        this.state.audio = new Audio(this.props.url);\r\n        this.setState(this.state);\r\n    }\r\n  \r\n    // togglePlay = () => {\r\n            // this.setState({ play: !this.state.play }, () => {\r\n            //     this.state.play ? this.state.audio.play() : this.state.audio.pause();\r\n            //   });\r\n    // }\r\n  \r\n    render() {\r\n        if (this.props.play) {\r\n            this.state.audio.play()\r\n        }\r\n        return (\r\n            <div>\r\n            {/* <button onClick={() => console.log}>{this.state.play ? 'Pause' : 'Play'}</button> */}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  export default Music;\r\n","import React from 'react';\r\nimport './FlappyFinch.css';\r\nimport Music from '../Music';\r\nimport { Utility } from '../Utility';\r\n\r\nconst frameInterval = 10;\r\nconst pipeXGap = 300;\r\nconst pipeYGap = 250;  \r\nconst pipeWidth = 100;\r\nconst gravityConstant = 0.15;\r\nconst flapVelocity = -6.25;\r\nconst birdSize = 40;\r\nconst nomNomSize = 10;\r\nconst mp3DingUrl = 'https://freesound.org/data/previews/341/341695_5858296-lq.mp3';\r\nconst mp3FlapUrl = 'https://freesound.org/data/previews/244/244980_3008343-lq.mp3';\r\n\r\nconst colliding = (object: {x: number, y: number, width: number, height: number, isPipe: boolean}, bird: BirdProps) => {\r\n    // calculate horizontal collision\r\n    let horizontalCollision = false;\r\n    const leftObject = object.x;\r\n    const rightObject = object.x + pipeWidth;\r\n    const leftBird = bird.x;\r\n    const rightBird = bird.x + birdSize;\r\n    if (rightBird > leftObject && leftBird < rightObject) horizontalCollision = true;\r\n    // calculate vertical collision\r\n    let verticalCollision = false;\r\n    if (object.isPipe) {\r\n        const halfGap = pipeYGap / 2;\r\n        const topPipeBottom = object.y - halfGap;\r\n        const bottomPipeTop = object.y + halfGap;\r\n        const topBird = bird.y;\r\n        const bottomBird = bird.y + birdSize;\r\n        if (topBird < topPipeBottom || bottomBird > bottomPipeTop) verticalCollision = true;\r\n    } else {\r\n        const topObject = object.y;\r\n        const bottomObject = object.y + object.height;\r\n        const topBird = bird.y;\r\n        const bottomBird = bird.y + birdSize;\r\n        if (bottomBird > topObject && topBird < bottomObject) verticalCollision = true;\r\n    }\r\n    // bird and pipe are colliding if both horizontal and vertical collision occur\r\n    return horizontalCollision && verticalCollision;\r\n};\r\n\r\nclass NomNomProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n}\r\n\r\nclass NomNom extends React.Component {\r\n\r\n    props: NomNomProps;\r\n\r\n    constructor(props: NomNomProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        const halfNomNomSize = nomNomSize / 2;\r\n        return (\r\n            <div>\r\n                <div className=\"nomnom\" style={{position:'absolute',\r\n                    width:`${nomNomSize}px`, height:`${nomNomSize}px`,\r\n                    top:`${this.props.y - halfNomNomSize}px`,\r\n                    left:`${this.props.x}px`}}>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nclass PipeProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    index: number = 0;\r\n    birdPosition: BirdProps = new BirdProps(0, 0);\r\n    onNomNom: any;\r\n    constructor(x: number, y: number, index: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nclass Pipe extends React.Component {\r\n\r\n    nomNomEaten: boolean = false;\r\n    nomNomProps: NomNomProps;\r\n    props: PipeProps;\r\n\r\n    constructor(props: PipeProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.nomNomProps = new NomNomProps();\r\n    }\r\n\r\n    render() {\r\n        const height = window.innerHeight;\r\n        const halfGap = pipeYGap / 2;\r\n        const topPipeTop = (this.props.y - height) - halfGap;\r\n        const bottomPipeTop = this.props.y + halfGap;\r\n        this.nomNomProps.x = this.props.x + (pipeWidth / 2);\r\n        if (this.nomNomProps.y === 0) {\r\n            const topPipeBottom = topPipeTop + height;\r\n            this.nomNomProps.y = topPipeBottom + (Math.random() * (bottomPipeTop - topPipeBottom));\r\n        }\r\n        const object = {\r\n            x: this.nomNomProps.x,\r\n            y: this.nomNomProps.y,\r\n            width: nomNomSize,\r\n            height: nomNomSize,\r\n            isPipe: false\r\n        };\r\n        if (!this.nomNomEaten && colliding(object, this.props.birdPosition)) {\r\n            this.props.onNomNom();\r\n            this.nomNomEaten = true;\r\n        }\r\n        return (\r\n            <div>\r\n                {this.nomNomEaten ? '' : <NomNom x={this.nomNomProps.x} y={this.nomNomProps.y}/>}\r\n                <img className=\"pipe\" src=\"assets/flappyfinch/pipe.png\" style={{ transform:'scale(-1, -1)',\r\n                    top:`${topPipeTop}px`, left:`${this.props.x}px`, width:`${pipeWidth}px`}}></img>\r\n                <img className=\"pipe\" src=\"assets/flappyfinch/pipe.png\" style={{ transform:'scale(-1, 1)',\r\n                    top:`${bottomPipeTop}px`, left:`${this.props.x}px`, width:`${pipeWidth}px`}}></img>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nclass BirdProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nclass Bird extends React.Component {\r\n\r\n    props: BirdProps;\r\n\r\n    constructor(props: BirdProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img className=\"bird\" src=\"assets/flappyfinch/bird.png\"\r\n                style={{left:`${this.props.x}px`, top:`${this.props.y}px`,\r\n                        width:`${birdSize}px`, height:`${birdSize}px`}}></img>\r\n        )\r\n    };\r\n}\r\n\r\nclass FlappyFinchGameState {\r\n    pipePositions: PipeProps[] = [];\r\n    birdPosition: BirdProps = new BirdProps(120, 0);\r\n    birdVelocity: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    collision: boolean = false;\r\n    currentPipeToCheck: number = 1;\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    shouldDing: boolean = false;\r\n    flapWhenOdd: number = 0;\r\n    groundX: number = 0;\r\n    skyX: number = 0;\r\n}\r\n\r\nexport default class FlappyFinchGame extends React.Component {\r\n    randomPipePosition = () => (window.innerHeight / 2) + ((Math.random() - 0.5) * (window.innerHeight / 2));\r\n\r\n    state: FlappyFinchGameState;\r\n    props: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('FlappyFinch');\r\n        this.props = props;\r\n        this.state = new FlappyFinchGameState();\r\n        this.restart();\r\n        setInterval(() => {\r\n            if (!this.state.paused && !this.state.gameover) {\r\n                this.animate();\r\n            }\r\n        }, frameInterval);\r\n    }\r\n\r\n    restart() {\r\n        this.state = new FlappyFinchGameState();\r\n        const lshs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n        if (!lshs) {\r\n            localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(0));\r\n        }\r\n        this.state.highscore = lshs ? Number(lshs) : 0;\r\n        let x = 3 * pipeXGap;\r\n        let index = 1;\r\n        Utility.array(10).forEach(() => {\r\n            this.state.pipePositions.push(new PipeProps(x, this.randomPipePosition(), index));\r\n            x += pipeXGap;\r\n            index++;\r\n        });\r\n        this.setState(this.state);\r\n    }\r\n\r\n    keyDown = (e: any | ' ' | 'Escape' | 'r') => {\r\n        this.setState((state: FlappyFinchGameState) => {\r\n            const k = typeof e === typeof ' ' ? e : e.key;\r\n            switch (k) {\r\n                case ' ':\r\n                    state.birdVelocity = flapVelocity;\r\n                    state.flapWhenOdd++;\r\n                    break;\r\n                case 'Escape':\r\n                    state.paused = !state.paused;\r\n                    break;\r\n                case 'r':\r\n                case 'R':\r\n                    this.restart();\r\n                    break;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    incrementScore() {\r\n        this.state.score++;\r\n        const lshs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n        if (Number(lshs) < this.state.score) {\r\n            this.state.highscore = this.state.score;\r\n            localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(this.state.highscore));\r\n        }\r\n    }\r\n\r\n    animate() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState((state: FlappyFinchGameState) => {\r\n            state.birdPosition.y += state.birdVelocity;\r\n            state.birdVelocity += gravityConstant;\r\n            state.pipePositions.forEach(pipe => {\r\n                if (state.currentPipeToCheck === pipe.index) {\r\n                    if (pipe.x + pipeWidth < this.state.birdPosition.x) {\r\n                        state.currentPipeToCheck++;\r\n                        this.incrementScore();\r\n                    }\r\n                    const object = {\r\n                        x: pipe.x, y: pipe.y,\r\n                        width: pipeWidth, height: height,\r\n                        isPipe: true\r\n                    };\r\n                    state.gameover = colliding(object, this.state.birdPosition);\r\n                }\r\n                if (pipe.index < state.currentPipeToCheck - 1) {\r\n                    pipe.index = Math.max(...state.pipePositions.map(pos => pos.index)) + 1;\r\n                    pipe.x = Math.max(...state.pipePositions.map(pos => pos.x)) + pipeXGap;\r\n                    pipe.y = this.randomPipePosition();\r\n                }\r\n                pipe.x -= 1;\r\n            });\r\n            [state.groundX, state.skyX] = [state.groundX -1, state.skyX - 0.5];\r\n            if (state.groundX < -width * 0.625) {\r\n                state.groundX = 0;\r\n            }\r\n            if (state.skyX < -width * 0.5) {\r\n                state.skyX = 0;\r\n            }\r\n            if (state.birdPosition.y > height - (birdSize + 50)) {\r\n                state.gameover = true;\r\n            } else if (state.birdPosition.y < 0) {\r\n                state.birdPosition.y = 0;\r\n            }\r\n            const hs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n            let newHighScore = true;\r\n            if (hs && Number(hs) > state.score) newHighScore = false;\r\n            if (newHighScore) {\r\n                localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(state.score));\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    nomNomEaten(): void {\r\n        this.incrementScore();\r\n        this.state.shouldDing = true;\r\n    }\r\n \r\n    render() {\r\n        const ding = this.state.shouldDing;\r\n        const flap = this.state.flapWhenOdd;\r\n        this.state.shouldDing = false\r\n        this.state.flapWhenOdd += Utility.isOdd(this.state.flapWhenOdd) ? 1 : 0;\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        const pipes = this.state.pipePositions.map((pipe, i) => \r\n            <Pipe key={`pipe${i}`}\r\n                x={pipe.x} y={pipe.y} index={pipe.index}\r\n                birdPosition={this.state.birdPosition} onNomNom={() => this.nomNomEaten()}/>\r\n        );\r\n        const gamestatus = (this.state.paused || this.state.gameover || this.state.collision) ?\r\n            <div className=\"paused\">{this.state.gameover ? 'GAME OVER' : 'PAUSED'}</div> : '';\r\n        const ground = Utility.array(5).map((v, i) =>\r\n            <img key={`background${i}`}\r\n                className=\"ground\" src=\"assets/flappyfinch/ground.png\"\r\n                style={{top:`${height - 50}px`, left:`${this.state.groundX + (i * width * 0.625)}px`, height:'50px',\r\n                color:'white', textAlign:'left', fontSize:'20px'}}></img>\r\n        );\r\n        const background = Utility.array(5).map((v, i) =>\r\n            <img key={`background${i}`}\r\n                className=\"background\" src=\"assets/flappyfinch/sky58.png\"\r\n                style={{left: `${10 + this.state.skyX + (i * width * 0.5)}px`}}></img>\r\n        );\r\n        const scoreboard = <div className=\"scoreboard\">\r\n                &nbsp;&nbsp;&nbsp;Score:&nbsp;{this.state.score}\r\n                <br />\r\n                &nbsp;&nbsp;&nbsp;High Score:&nbsp;{this.state.highscore}\r\n                <br />\r\n                &nbsp;&nbsp;&nbsp;\r\n                <span onClick={() => this.keyDown('r')}>\r\n                    (r) Reset\r\n                </span>\r\n                &nbsp;|&nbsp;\r\n                <span onClick={() => this.keyDown('Escape')}>\r\n                    (Escape) Pause\r\n                </span>\r\n                &nbsp;|&nbsp;\r\n                <span>\r\n                    (Space) Flap\r\n                </span>\r\n            </div>;\r\n        const shouldPlayFlapSound = (i: number) => Utility.isOdd(flap)\r\n            ? (this.state.paused || this.state.gameover\r\n                ? false : Math.floor(flap / 2) % 4 === i)\r\n            : false;\r\n        return (\r\n            <div className=\"game\" onClick={() => this.keyDown(' ')}>\r\n                {background}\r\n                <Music url={mp3DingUrl} play={ding}/>\r\n                {/* Allows flap sound to be played multiple times */}\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(0)}/>\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(1)}/>\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(2)}/>\r\n                <Music url={mp3FlapUrl} play={shouldPlayFlapSound(3)}/>\r\n                {/* Allows flap sound to be played multiple times */}\r\n                <Bird x={this.state.birdPosition.x} y={this.state.birdPosition.y}/>\r\n                {pipes}\r\n                {gamestatus}\r\n                {ground}\r\n                {scoreboard}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './GameOfLife.css';\r\nimport { Utility } from '../Utility';\r\n\r\n// calculate the size of the squares so that the board fills most of the screen\r\n//  and the max length is the measurement of the longer edge\r\nconst maxLength = 35;\r\nconst boardWidth = Math.floor(window.innerWidth > window.innerHeight ? maxLength\r\n    : (window.innerWidth / window.innerHeight) * maxLength);\r\nconst boardHeight = Math.floor(window.innerHeight > window.innerWidth ? maxLength\r\n    : (window.innerHeight / window.innerWidth) * maxLength);\r\nlet squareSize = 0;\r\n\r\nclass BoardProps {\r\n    squares: Square[] = [];\r\n    clicked: any;\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    livingColor = 'green';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Utility.array(boardHeight).map((v, rowindex) =>\r\n            Utility.array(boardWidth).map((v, columnindex) => {\r\n                let color;\r\n                this.props.squares.forEach(square => {\r\n                    if (square.alive && Utility.arePositionsEqual([square.y, square.x], [rowindex, columnindex]))\r\n                        color = this.livingColor;\r\n                });\r\n                return color ? color : this.boardColor;\r\n            })\r\n        );\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Utility.array(boardHeight).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Utility.array(boardWidth).map((row, columnindex) =>\r\n                                    <div className=\"gameoflifesquare\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={{\r\n                                            backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`\r\n                                        }} onClick={() => this.props.clicked(rowindex, columnindex)}>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Square {\r\n    x: number;\r\n    y: number;\r\n    alive: boolean;\r\n    neighbors: number;\r\n    constructor(x: number, y: number, alive: boolean, neighbors: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.alive = alive;\r\n        this.neighbors = neighbors;\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    paused: boolean = false;\r\n    gametick: boolean = false;\r\n    squares: Square[] = [];\r\n    gameTickInterval: number = 250;\r\n}\r\n\r\nexport default class GameOfLife extends React.Component {\r\n\r\n    gameTickDelta: number = 0;\r\n    snakeLengthDelta: number = 3;\r\n    scoreDelta: number = 5;\r\n    interval: any;\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('Game of Life');\r\n        const tempState = new GameState();\r\n        tempState.squares = Utility.array(boardWidth).map((v, x) =>\r\n            Utility.array(boardHeight).map((v, y) => new Square(x, y, false, 0))\r\n        ).flat();\r\n        this.state = tempState;\r\n        this.setState(tempState);\r\n        this.keyDown('r');\r\n        this.interval = setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    gameTick() {\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused || state.gametick) {\r\n                console.log('tick');\r\n                // count neighbors of a square\r\n                const countNeighbors = (livingSquare: Square, livingSquares: Square[]) => {\r\n                    let count = 0;\r\n                    [-1, 0, 1].forEach(xIndex => {\r\n                        [-1, 0, 1].forEach(yIndex => {\r\n                            if ((xIndex !== 0 || yIndex !== 0)\r\n                                && livingSquares.filter(square =>\r\n                                    square.x === livingSquare.x + xIndex\r\n                                    && square.y === livingSquare.y + yIndex).length > 0\r\n                                ) count++;\r\n                        });\r\n                    });\r\n                    return count;\r\n                }\r\n                // count the neighbors of all squares\r\n                const livingSquares = state.squares.filter(square => square.alive);\r\n                state.squares = state.squares.map(square => { square.neighbors = 0; return square; });\r\n                state.squares.forEach(square => {\r\n                    square.neighbors = countNeighbors(square, livingSquares);\r\n                });\r\n                // apply the rules from wikipedia https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\r\n                state.squares.map(square => {\r\n                    // 1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n                    // 2. Any live cell with two or three live neighbours lives on to the next generation.\r\n                    // 3. Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n                    // 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n                    square.alive = square.alive\r\n                        ? !(square.neighbors < 2 || square.neighbors > 3)\r\n                        : square.neighbors === 3;\r\n                    return square;\r\n                });\r\n                state.gametick = false;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        const k = e && e.key ? e.key : e;\r\n        switch (k) {\r\n            case 'Escape':\r\n                this.state.paused = !this.state.paused;\r\n                break;\r\n            case 'r':\r\n            case 'R':\r\n                this.state.squares.map(square => {\r\n                    square.alive = Math.random() < 0.5;\r\n                    return square;\r\n                });\r\n                break;\r\n            case 'c':\r\n            case 'C':\r\n            case 'a':\r\n            case 'A':\r\n                this.state.squares.map(square => {\r\n                    square.alive = k === 'a' || k === 'A';\r\n                    return square;\r\n                });\r\n                break;\r\n            case ' ':\r\n            case 'Space':\r\n                this.state.gametick = true;\r\n                this.gameTick();\r\n                break;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    clicked(rowindex: number, columnindex: number) {\r\n        this.setState((state: GameState) => {\r\n            const clickedSquare = state.squares.find(square => square.y === rowindex && square.x === columnindex);\r\n            if (clickedSquare) clickedSquare.alive = !clickedSquare.alive;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board\r\n                    squares={this.state.squares}\r\n                    clicked={(rowindex: number, columnindex: number) => this.clicked(rowindex, columnindex)}/>\r\n                <div className=\"gameoflifesquare\" style={{width: `${boardWidth * squareSize}px`}}>\r\n                {\r\n                    [\r\n                        {'key': 'Escape', 'action': 'Play/Pause'},\r\n                        {'key': 'r', 'action': 'Random'},\r\n                        {'key': 'c', 'action': 'Clear All'},\r\n                        {'key': 'a', 'action': 'Fill All'},\r\n                        {'key': 'Space', 'action': 'next generation'}\r\n                    ].map((instruction, i) =>\r\n                        <span style={{cursor:'pointer'}} onClick={() => this.keyDown(instruction.key)}>\r\n                            ({instruction.key}) {instruction.action} {i < 4 ? '| ' : ''}\r\n                        </span>\r\n                    )\r\n                }\r\n                </div>\r\n                <div className=\"gameoflifesquare\" style={{width: `${boardWidth * squareSize}px`}}>\r\n                    Learn more on&nbsp;\r\n                    <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">wikipedia</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Tetris.css';\r\nimport { Utility } from '../Utility';\r\n\r\n// calculate the size of the squares so that the board fills most of the screen\r\n//  and the max length is the measurement of the longer edge\r\nconst boardWidth = 10;\r\nconst boardHeight = 20;\r\nlet squareSize = 0;\r\n\r\nclass BoardProps {\r\n    squares: Square[] = [];\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    livingColor = 'green';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Utility.array(boardHeight).map((v, rowindex) =>\r\n            Utility.array(boardWidth).map((v, columnindex) => {\r\n                let color;\r\n                this.props.squares.forEach(square => {\r\n                    if ((square.piece || square.blob) && Utility.arePositionsEqual([square.y, square.x], [rowindex, columnindex]))\r\n                        color = !!square.blob ? square.blob : square.piece;\r\n                });\r\n                return color ? color : this.boardColor;\r\n            })\r\n        );\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Utility.array(boardHeight).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Utility.array(boardWidth).map((row, columnindex) =>\r\n                                    <div className=\"gameoflifesquare\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={{\r\n                                            backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`\r\n                                        }}>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Square {\r\n    x: number;\r\n    y: number;\r\n    piece: string;\r\n    blob: string;\r\n    constructor(x: number, y: number, piece: string, blob: string) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.piece = piece;\r\n        this.blob = blob;\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    score: number = 0;\r\n    currentPiece: Square[] = [];\r\n    paused: boolean = false;\r\n    gametick: boolean = false;\r\n    squares: Square[] = [];\r\n    gameTickInterval: number = 250;\r\n}\r\n\r\nfunction getRandomPiece(): Square[] {\r\n    const index = Math.floor(Math.random() * 7);\r\n    const colors: string[] = [\r\n        'green' /* I */, 'blue' /* Z */, 'indigo' /* S */,\r\n        'magenta' /* T */, 'yellow' /* O */,\r\n        'orange' /* L*/, 'red' /* J */\r\n    ];\r\n    const result: Square[] = [\r\n        [[-1, 0], [0, 0], [1, 0], [2, 0]], // I\r\n        [[0, 0], [1, 0], [1, 1], [2, 1]], // Z\r\n        [[0, 1], [1, 0], [1, 1], [2, 0]], // S\r\n        [[0, 0], [1, 0], [2, 0], [1, 1]], // T\r\n        [[0, 0], [0, 1], [1, 0], [1, 1]], // O\r\n        [[0, 1], [0, 0], [1, 0], [2, 0]], // L\r\n        [[2, 1], [0, 0], [1, 0], [2, 0]] // J\r\n    ][index].map(c => new Square(c[0], c[1], colors[index], ''));\r\n    return result;\r\n}\r\n\r\nconst positionsEqual = (s: Square, sq: Square): boolean => sq.x === s.x && s.y === sq.y;\r\n\r\nexport default class Tetris extends React.Component {\r\n\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        Utility.setTitle('Tetris');\r\n        const tempState = new GameState();\r\n        tempState.squares = Utility.array(boardWidth).map((v, x) =>\r\n            Utility.array(boardHeight).map((v, y) => new Square(x, y, '', ''))\r\n        ).flat();\r\n        this.state = tempState;\r\n        this.setState(tempState);\r\n        this.keyDown('r');\r\n        setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    repaint(state: GameState): GameState {\r\n        state.squares.forEach(s => s.piece = '');\r\n        state.currentPiece.forEach(s => {\r\n            const asdf = state.squares.find(sq => positionsEqual(s, sq));\r\n            if (asdf) {\r\n                asdf.piece = state.currentPiece[0].piece;\r\n            }\r\n        });\r\n        return state;\r\n    }\r\n\r\n    gameTick() {\r\n        const movePieceDown = (state: GameState): GameState => {\r\n            state.currentPiece = state.currentPiece.map(s => new Square(s.x, s.y + 1, s.piece, s.blob));\r\n            return state;\r\n        };\r\n        const pieceWillCollide = (state: GameState): boolean => {\r\n            let result = false;\r\n            const potentialState = movePieceDown(JSON.parse(JSON.stringify(state)));\r\n            potentialState.currentPiece.forEach(s => {\r\n                if (!result) {\r\n                    const potentialBlobPart = potentialState.squares.find(sq => positionsEqual(s, sq));\r\n                    result = !!potentialBlobPart ? !!potentialBlobPart.blob : true;\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        const convertPieceToBlob = (state: GameState): GameState => {\r\n            state.squares = state.squares.map(s => {\r\n                const asdf = state.currentPiece.find(sq => positionsEqual(s, sq));\r\n                if (asdf) {\r\n                    s.blob = !!s.blob ? s.blob : asdf.piece;\r\n                }\r\n                return s;\r\n            });\r\n            return state;\r\n        };\r\n        const getFullRows = (state: GameState): number[] => {\r\n            let result: number[] = [];\r\n            for (let i = 0; i < boardHeight; i++) {\r\n                const emptySquares = state.squares.filter(s => s.y === i && !s.blob && !s.piece);\r\n                if (emptySquares.length === 0) {\r\n                    result.push(i);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        const removeFullRows = (state: GameState, fullRowIndecies: number[]): GameState => {\r\n            const temp = '_____';\r\n            state.squares = state.squares.map(s => {\r\n                if (fullRowIndecies.includes(s.y)) {\r\n                    s.blob = temp;\r\n                    s.piece = '';\r\n                    s.y = fullRowIndecies.indexOf(s.y);\r\n                }\r\n                return s;\r\n            });\r\n            fullRowIndecies.forEach(emptyRowIndex => {\r\n                state.squares.filter(s => s.y < emptyRowIndex)\r\n                    .forEach(s => s.y += s.blob !== temp ? 1 : 0);\r\n            });\r\n            state.squares.filter(s => s.blob === temp).forEach(s => s.blob = '');\r\n            return state;\r\n        };\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused || state.gametick) {\r\n                let addNewPiece = true;\r\n                state = this.repaint(state);\r\n                if (state.currentPiece && state.currentPiece.length !== 0) {\r\n                    if (!pieceWillCollide(state)) {\r\n                        addNewPiece = false;\r\n                        state = movePieceDown(state);\r\n                    } else {\r\n                        state = convertPieceToBlob(state);\r\n                        const fullRows = getFullRows(state);\r\n                        state.score += fullRows.length;\r\n                        state = removeFullRows(state, fullRows);\r\n                        state.currentPiece = [];\r\n                    }\r\n                }\r\n                if (addNewPiece) {\r\n                    state = ((state: GameState): GameState => {\r\n                        state.currentPiece = getRandomPiece()\r\n                            .map(s => new Square(s.x + 4, s.y, s.piece, s.blob));\r\n                        return state;\r\n                    })(state);\r\n                }\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        const k = e && e.key ? e.key : e;\r\n        const movePiece = (direction: number): void => {\r\n            this.setState((state: GameState) => {\r\n                if (!state.paused || state.gametick) {\r\n                    let valid = true;\r\n                    state.currentPiece.forEach(s => {\r\n                        const pendingPosition = s.x + direction;\r\n                        const v = pendingPosition >= 0 && pendingPosition < boardWidth;\r\n                        valid = v && valid;\r\n                    });\r\n                    if (valid) {\r\n                        state.currentPiece.map(s => {\r\n                            s.x += direction;\r\n                            return s;\r\n                        });\r\n                    }\r\n                }\r\n                state = this.repaint(state);\r\n                return state;\r\n            });\r\n        };\r\n        const rotatePiece = (clockwise: boolean): void => {\r\n            this.setState((state: GameState) => {\r\n                if (!state.paused || state.gametick) {\r\n                    let minX = Math.min(...state.currentPiece.map(s => s.x));\r\n                    let minY = Math.min(...state.currentPiece.map(s => s.y));\r\n                    const moveToOrigin = (squares: Square[], to: boolean): Square[] =>\r\n                        squares.map(s =>\r\n                            new Square(s.x - (to ? minX : -minX), s.y - (to ? minY : -minY), s.piece, s.blob));\r\n                    const currentPieceAtOrigin: Square[] = moveToOrigin(state.currentPiece, true);\r\n                    const indecies: {p: number, x: number, y: number}[] = [\r\n                        {p: 1, x: 0, y: 0}, {p: 2, x: 1, y: 0}, {p: 3, x: 2, y: 0}, {p: 4, x: 3, y: 0},\r\n                        {p: 5, x: 0, y: 1}, {p: 6, x: 1, y: 1}, {p: 7, x: 2, y: 1}, {p: 8, x: 3, y: 1},\r\n                        {p: 9, x: 0, y: 2}, {p: 10, x: 1, y: 2}, {p: 11, x: 2, y: 2}, {p: 12, x: 3, y: 2},\r\n                        {p: 13, x: 0, y: 3}, {p: 14, x: 1, y: 3}, {p: 15, x: 2, y: 3}, {p: 16, x: 3, y: 3}\r\n                    ]\r\n                    const matrix = clockwise ? [\r\n                        [1, 4], [2, 8], [3, 12], [4, 16],\r\n                        [5, 3], [6, 7], [7, 11], [8, 15],\r\n                        [9, 2], [10, 6], [11, 10], [12, 14],\r\n                        [13, 1], [14, 5], [15, 9], [16, 13]\r\n                    ] : [\r\n                        [1, 13], [2, 9], [3, 5], [4, 1],\r\n                        [5, 14], [6, 10], [7, 6], [8, 2],\r\n                        [9, 15], [10, 11], [11, 7], [12, 3],\r\n                        [13, 16], [14, 12], [15, 8], [16, 4]\r\n                    ];\r\n                    const rotate = (matrix: number[][], piece: Square[]): Square[] => {\r\n                            return piece.map(s => {\r\n                                const index = indecies.find(i => i.x === s.x && i.y === s.y);\r\n                                if (index) {\r\n                                    const newIndex = matrix.find(a => a[0] === index.p)![1];\r\n                                    const i = indecies.find(i => i.p === newIndex);\r\n                                    return new Square(i!.x, i!.y, s.piece, s.blob);\r\n                                } else {\r\n                                    return s;\r\n                                }\r\n                            });\r\n                    };\r\n                    const rotated = rotate(matrix, currentPieceAtOrigin);\r\n                    minX -= Math.min(...rotated.map(s => s.x));\r\n                    minY -= Math.min(...rotated.map(s => s.y));\r\n                    state.currentPiece = moveToOrigin(rotated, false);\r\n                }\r\n                state = this.repaint(state);\r\n                return state;\r\n            });\r\n        }\r\n        const inc = (arr: string[]) => arr.includes(k);\r\n        if (inc(['Escape', 'Enter'])) {\r\n            this.state.paused = !this.state.paused;\r\n        } else if (inc(['w', 'W', 'ArrowUp'])) {\r\n        } else if (inc(['s', 'S', 'ArrowDown'])) {\r\n            this.gameTick();\r\n        } else if (inc(['a', 'A', 'ArrowLeft'])) {\r\n            movePiece(-1);\r\n        } else if (inc(['d', 'D', 'ArrowRight'])) {\r\n            movePiece(1);\r\n        } else if (inc([',', '<'])) {\r\n            rotatePiece(false);\r\n        } else if (inc(['.', '>'])) {\r\n            rotatePiece(true);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    render() {\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board squares={this.state.squares} />\r\n                <div className=\"board-row\">\r\n                    <div className=\"gameoflifesquare\" style={{width: `${boardWidth * squareSize}px`}}>\r\n                    {\r\n                        [\r\n                            {'key': 'Escape', 'action': 'Play/Pause'},\r\n                            {'key': 'WASD/Arrow Keys', 'action': 'Move'},\r\n                            {'key': ',', 'action': 'Rotate Counter Clockwise'},\r\n                            {'key': '.', 'action': 'Rotate Clockwise'}\r\n                        ].map((instruction, i) =>\r\n                            <span style={{cursor:'pointer'}} onClick={() => this.keyDown(instruction.key)}>\r\n                                ({instruction.key}) {instruction.action} {i < 4 ? '| ' : ''}\r\n                            </span>\r\n                        )\r\n                    }\r\n                    </div>\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"gameoflifesquare\" style={{width: `${boardWidth * squareSize}px`}}>\r\n                        Score: { this.state.score }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// React Components\r\nimport React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Games\r\nimport SnakeGame from './games/Snake';\r\nimport FloatyStars from './games/FloatyStars';\r\nimport FlappyFinchGame from './games/FlappyFinch';\r\nimport GameOfLife from './games/GameOfLife';\r\nimport Tetris from './games/Tetris';\r\n// Material Design\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass Game {\r\n    title: string = '';\r\n    image: string = '';\r\n    gif: string = '';\r\n    url: string = '';\r\n    reactcomponent: any = undefined;\r\n    constructor(title: string, image: string, gif: string, url: string, reactcomponent: any) {\r\n        this.title = title;\r\n        this.image = image;\r\n        this.gif = gif;\r\n        this.url = url;\r\n        this.reactcomponent = reactcomponent;\r\n    }\r\n}\r\n\r\nconst games = [\r\n    new Game('Snake', 'assets/menu/snake.png', 'assets/menu/snake.gif', '/snake', SnakeGame),\r\n    new Game('FloatyStars', 'assets/menu/floatystars.png', 'assets/menu/floatystars.gif', '/floatystars', FloatyStars),\r\n    new Game('FlappyFinch', 'assets/menu/flappyfinch.png', 'assets/menu/flappyfinch.gif', '/flappyfinch', FlappyFinchGame),\r\n    new Game('GameOfLife', 'assets/menu/gameoflife.png', 'assets/menu/gameoflife.gif', '/gameoflife', GameOfLife),\r\n    new Game('Tetris', 'assets/menu/tetris.png', 'assets/menu/tetris.gif', '/tetris', Tetris)\r\n];\r\n\r\nfunction GameCard(props: Game) {\r\n    const [isHover, setIsHover] = useState(false);\r\n    const getImage = () => isHover ? props.gif : props.image;\r\n    return (\r\n        <Card elevation={5}\r\n            onMouseEnter={() => setIsHover(true)}\r\n            onMouseLeave={() => setIsHover(false)}>\r\n            <CardActionArea>\r\n                <CardMedia style={{height:150}} image={getImage()}\r\n                    title={`Image of ${props.title} game`} />\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <div className=\"container\">\r\n                    <div>\r\n                        <Typography gutterBottom\r\n                            variant=\"h5\" component=\"h2\"\r\n                        >\r\n                            {props.title}\r\n                        </Typography>\r\n                    </div>\r\n                    <div style={{textAlign:\"right\"}}>\r\n                        <Button size=\"small\" color=\"primary\"\r\n                            onClick={() => window.location.pathname = props.url}\r\n                        >\r\n                            Play Game\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nclass Index extends React.Component {\r\n    updateDimensions = () => this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    componentDidMount = () => window.addEventListener('resize', this.updateDimensions);\r\n    componentWillUnmount = () => window.removeEventListener('resize', this.updateDimensions);\r\n    render() {\r\n        const width: number = window.innerWidth;\r\n        let columnClass: string = width < 1200 ?\r\n            (width < 992 ? (width < 768 ? 'col-12'\r\n                : 'col-6') : 'col-4') : 'col-3';\r\n        return (\r\n            <div style={{backgroundColor: \"#AAAAAA\", height: \"100vh\"}}>\r\n                <div className=\"container\">\r\n                    <br />\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography component=\"p\">\r\n                                I have written a few games here in an effort\r\n                                to learn how <a href=\"https://reactjs.org/\">reactjs</a> works.\r\n                                Listed below are the games that I have created. Many of them\r\n                                are rip-offs of common games.\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                    <br />\r\n                    <div className=\"row\">\r\n                    {\r\n                        games.map(game =>\r\n                            <div key={game.title} className={columnClass}>\r\n                                <br />\r\n                                <GameCard title={game.title} url={game.url}\r\n                                    image={game.image} gif={game.gif}\r\n                                    reactcomponent={undefined}/>\r\n                                <br />\r\n                            </div>\r\n                        )\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename={'/'}>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Index} />\r\n                    {\r\n                        games.map(game =>\r\n                            <Route key={game.url} path={game.url} exact component={game.reactcomponent} />\r\n                        )\r\n                    }\r\n                    {\r\n                        games.map(g => g.url).includes(window.location.pathname)\r\n                        ? document.getElementsByTagName('body')[0].style.backgroundColor = '#FFFFFF'\r\n                        : document.getElementsByTagName('body')[0].style.backgroundColor = '#AAAAAA'\r\n                    }\r\n                    <Route path=\"*\" exact component={() => {\r\n                        return (\r\n                            <div style={{backgroundColor: \"#AAAAAA\"}}>\r\n                                <br />\r\n                                <div className=\"container\">\r\n                                    <Card>\r\n                                        <CardContent>\r\n                                            <Typography component=\"p\">\r\n                                                ¯\\_(ツ)_/¯ NOT FOUND\r\n                                                <br />\r\n                                                <Link to=\"/\">Go back home</Link>\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}