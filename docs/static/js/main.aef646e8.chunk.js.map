{"version":3,"sources":["Snake.tsx","FloatyStars.tsx","Music.tsx","FlappyFinch.tsx","serviceWorker.ts","index.tsx"],"names":["squareSize","arePositionsEqual","p1","p2","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snakeHeadColor","snakeBodyColor","foodColor","boardColor","_this2","squareColors","Array","fill","map","v","rowindex","columnindex","color","snakeBody","forEach","bodyPart","food","snakeHead","onEat","maxWidth","Math","floor","window","innerWidth","maxHeight","innerHeight","min","react_default","a","createElement","row","className","key","concat","style","backgroundColor","width","height","React","Component","ScoreBoard","_this3","score","paused","gameover","highscore","GameState","snakeDirection","snakeHeadPosition","boardHeight","foodPosition","boardWidth","snakeLength","gameTickInterval","SnakeGame","_this4","gameTickDelta","snakeLengthDelta","scoreDelta","currentDirection","interval","state","keyDown","e","setState","k","includes","clearInterval","setInterval","gameTick","tempState","_this5","dir","_state$snakeHeadPosit","slicedToArray","y","x","push","length","slice","i","hs","localStorage","getItem","newHighScore","Number","setItem","JSON","stringify","document","addEventListener","_this6","random","isFoodInBody","_this7","isNaN","Snake_Board","eatFood","Snake_ScoreBoard","numberOfStars","maxSpeed","frameInterval","FloatyStarsState","starLocations","starVelocities","FloatyStars","animate","starLocation","filter","star","top","left","MusicState","audio","Audio","play","Music","url","flapVelocity","colliding","object","bird","horizontalCollision","leftObject","rightObject","leftBird","verticalCollision","isPipe","topPipeBottom","pipeYGap","bottomPipeTop","topBird","bottomBird","topObject","bottomObject","NomNomProps","NomNom","position","nomNomSize","PipeProps","index","birdPosition","BirdProps","onNomNom","Pipe","nomNomEaten","nomNomProps","topPipeTop","pipeWidth","FlappyFinch_NomNom","transform","Bird","FlappyFinchGameState","pipePositions","birdVelocity","collision","currentPipeToCheck","shouldDing","shouldFlap","groundX","skyX","FlappyFinchGame","randomPipePosition","restart","lshs","pipe","incrementScore","max","apply","toConsumableArray","pos","_ref","_ref2","ding","flap","_ref3","pipes","FlappyFinch_Pipe","gamestatus","ground","textAlign","fontSize","sky","src_Music","FlappyFinch_Bird","Boolean","location","hostname","match","App","react_router_dom","basename","react_router","path","exact","component","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aef646e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Snake.css';\r\n\r\nconst boardWidth = 30;\r\nconst boardHeight = 20;\r\nlet squareSize = 0;\r\nconst randomPosition = () => [Math.floor(Math.random() * boardHeight), Math.floor(Math.random() * boardWidth)];\r\nconst arePositionsEqual = (p1: number[], p2: number[]) => p1[0] === p2[0] && p1[1] === p2[1];\r\n\r\nclass BoardProps {\r\n    snakeBody: number[][] = [];\r\n    snakeHead: number[] = [];\r\n    food: number[] = [];\r\n    onEat: any;\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    snakeHeadColor = 'blue';\r\n    snakeBodyColor = 'green';\r\n    foodColor = 'red';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Array(boardHeight).fill(null).map((v, rowindex) =>\r\n            Array(boardWidth).fill(null).map((v, columnindex) => {\r\n                let color;\r\n                this.props.snakeBody.forEach(bodyPart => {\r\n                    if (arePositionsEqual(bodyPart, [rowindex, columnindex]))\r\n                        color = this.snakeBodyColor;\r\n                });\r\n                if (arePositionsEqual(this.props.food, [rowindex, columnindex]))\r\n                    color = this.foodColor;\r\n                else if (arePositionsEqual(this.props.snakeHead, [rowindex, columnindex]))\r\n                    color = this.snakeHeadColor;\r\n                else if (!color)\r\n                    color = this.boardColor;\r\n                return color;\r\n            })\r\n        );\r\n        // trigger onEat event if the head is on top of food\r\n        if (arePositionsEqual(this.props.snakeHead, this.props.food)) this.props.onEat();\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Array(boardHeight).fill(null).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Array(boardWidth).fill(null).map((row, columnindex) =>\r\n                                    <div className=\"square\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={\r\n                                            {backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`}\r\n                                        }>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ScoreBoardProps {\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n}\r\n\r\nclass ScoreBoard extends React.Component {\r\n\r\n    props: ScoreBoardProps;\r\n\r\n    constructor(props: ScoreBoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"square\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        Score: {this.props.score}\r\n                    </div>\r\n                    <div className=\"square\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        {\r\n                            this.props.paused ?\r\n                            <div style={{color:'green'}}><b>Paused</b></div>\r\n                            : this.props.gameover ?\r\n                            <div style={{color:'red'}}><b>Game Over</b></div>\r\n                            : `High Score: ${this.props.highscore}`\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"square\" style={{width: `${boardWidth * (squareSize)}px`}}>\r\n                        (r) Reset | (WASD, Arrow Keys) move snake | (esc) Escape\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    score: number = 0;\r\n    snakeDirection: string = '>';\r\n    snakeHeadPosition: number[] = [boardHeight / 2, 3];\r\n    snakeBody: number[][] = [];\r\n    foodPosition: number[] = [boardHeight / 2, boardWidth / 2];\r\n    snakeLength: number = 1;\r\n    gameTickInterval: number = 110;\r\n}\r\n\r\nexport default class SnakeGame extends React.Component {\r\n\r\n    gameTickDelta: number = 0;\r\n    snakeLengthDelta: number = 3;\r\n    scoreDelta: number = 5;\r\n    currentDirection: string;\r\n    interval: any;\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const tempState = new GameState();\r\n        this.state = tempState;\r\n        this.currentDirection = this.state.snakeDirection;\r\n        this.setState(tempState);\r\n        this.interval = setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    gameTick() {\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused && !state.gameover) {\r\n                // move snake in direction set by keyDown method\r\n                const dir = state.snakeDirection;\r\n                this.currentDirection = dir;\r\n                let [y, x] = state.snakeHeadPosition;\r\n                state.snakeBody.push([y, x]);\r\n                x = dir === '<' ? x - 1 : dir === '>' ? x + 1 : x;\r\n                y = dir === '^' ? y - 1 : dir === 'v' ? y + 1 : y;\r\n                // check for collisions and set new positions\r\n                if (y < 0 || y > boardHeight - 1 || x < 0 || x > boardWidth - 1) {\r\n                    state.gameover = true;\r\n                } else {\r\n                    state.snakeHeadPosition = [y, x];\r\n                    state.snakeBody = Array(state.snakeBody.length).fill([-1, -1]).concat(state.snakeBody);\r\n                    state.snakeBody = state.snakeBody.slice(state.snakeBody.length - state.snakeLength);\r\n                    state.snakeBody.forEach((bodyPart, i) => {\r\n                        if (arePositionsEqual(bodyPart, state.snakeHeadPosition)) state.gameover = true;\r\n                    });\r\n                }\r\n                if (state.gameover) {\r\n                    const hs = localStorage.getItem('nate314.snake.highScore');\r\n                    let newHighScore = true;\r\n                    if (hs && Number(hs) > state.score) newHighScore = false;\r\n                    if (newHighScore) {\r\n                        localStorage.setItem('nate314.snake.highScore', JSON.stringify(state.score));\r\n                    }\r\n                }\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        this.setState((state: GameState) => {\r\n            const k = e.key;\r\n            // set the direction based on the key pressed\r\n            state.snakeDirection =\r\n                !['^', 'v'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowUp' || k === 'W' || k === 'w') ? '^' :\r\n                    (k === 'ArrowDown' || k === 'S' || k === 's') ? 'v' : this.currentDirection) :\r\n                !['<', '>'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowLeft' || k === 'A' || k === 'a') ? '<' :\r\n                    (k === 'ArrowRight' || k === 'D' || k === 'd') ? '>' : this.currentDirection)\r\n                : this.currentDirection;\r\n            if (k === 'Escape') state.paused = !state.paused;\r\n            if (['r', 'R'].includes(k)) {\r\n                clearInterval(this.interval);\r\n                state = new GameState();\r\n                this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    eatFood() {\r\n        this.setState((state: GameState) => {\r\n            // move food and increment the snake's length\r\n            while (true) {\r\n                state.foodPosition = randomPosition();\r\n                let isFoodInBody = false;\r\n                state.snakeBody.forEach(bodyPart => {\r\n                    if (arePositionsEqual(state.foodPosition, bodyPart)) isFoodInBody = true;\r\n                });\r\n                if (!isFoodInBody) break;\r\n            }\r\n            state.snakeLength += this.snakeLengthDelta;\r\n            state.score += this.scoreDelta;\r\n            state.gameTickInterval -= this.gameTickDelta;\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let highscore = Number(localStorage.getItem('nate314.snake.highScore'));\r\n        highscore = isNaN(highscore) ? 0 : highscore;\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board\r\n                    snakeBody={this.state.snakeBody}\r\n                    snakeHead={this.state.snakeHeadPosition}\r\n                    food={this.state.foodPosition}\r\n                    onEat={() => this.eatFood()}\r\n                />\r\n                <ScoreBoard\r\n                    score={this.state.score}\r\n                    highscore={highscore}\r\n                    paused={this.state.paused}\r\n                    gameover={this.state.gameover}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './FloatyStars.css';\r\n\r\nconst numberOfStars = 100;\r\nconst starSize = 10;\r\nconst maxSpeed = 1;\r\nconst frameInterval = 10;\r\n\r\nclass FloatyStarsState {\r\n    starLocations: number[][] = [];\r\n    starVelocities: number[][] = [];\r\n}\r\n\r\nexport default class FloatyStars extends React.Component {\r\n\r\n    state: FloatyStarsState;\r\n    props: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = new FloatyStarsState();\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        Array(numberOfStars).fill(null).forEach(() => {\r\n            this.state.starLocations.push([Math.random() * width, Math.random() * height]);\r\n            this.state.starVelocities.push([Math.random() * maxSpeed, Math.random() * maxSpeed]);\r\n        });\r\n        this.setState(this.state);\r\n        setInterval(() => {\r\n            this.animate();\r\n        }, frameInterval);\r\n    }\r\n\r\n    animate() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState((state: FloatyStarsState) => {\r\n            let i = 0;\r\n            state.starLocations.forEach(starLocation => {\r\n                starLocation[0] -= state.starVelocities[i][0];\r\n                starLocation[1] += state.starVelocities[i][1];\r\n                if (!((starLocation[0] < width + starSize && starLocation[0] > -2 * starSize))) {\r\n                    starLocation[0] = width + starSize;\r\n                }\r\n                if (!((starLocation[1] < height + starSize && starLocation[1] > -2 * starSize))) {\r\n                    starLocation[1] = -starSize;\r\n                }\r\n                i++;\r\n            });\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        return (\r\n            <div className=\"sky\">\r\n                {\r\n                    this.state.starLocations\r\n                    .filter(star => (star[0] < width && star[0] > 0) && (star[1] < height && star[1] > 0))\r\n                    .map(starLocation =>\r\n                            <div className=\"snow\"\r\n                                style={{\r\n                                    top: `${starLocation[1]}px`, left: `${starLocation[0]}px`,\r\n                                    width: `${starSize}px`, height: `${starSize}px`\r\n                                }}>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nclass MusicProps {\r\n    url: string = '';\r\n    play: boolean = false;\r\n}\r\n\r\nclass MusicState {\r\n    audio: HTMLAudioElement = new Audio('');\r\n    play: boolean = false;\r\n}\r\n\r\nclass Music extends React.Component {\r\n    state: MusicState;\r\n    props: MusicProps;\r\n\r\n    constructor(props: MusicProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = new MusicState();\r\n        this.state.audio = new Audio(this.props.url);\r\n        this.setState(this.state);\r\n    }\r\n  \r\n    // togglePlay = () => {\r\n            // this.setState({ play: !this.state.play }, () => {\r\n            //     this.state.play ? this.state.audio.play() : this.state.audio.pause();\r\n            //   });\r\n    // }\r\n  \r\n    render() {\r\n        if (this.props.play) {\r\n            this.state.audio.play()\r\n        }\r\n        return (\r\n            <div>\r\n            {/* <button onClick={() => console.log}>{this.state.play ? 'Pause' : 'Play'}</button> */}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  export default Music;\r\n","import React from 'react';\r\nimport './FlappyFinch.css';\r\nimport Music from './Music';\r\n\r\nconst frameInterval = 10;\r\nconst pipeXGap = 300;\r\nconst pipeYGap = 250;  \r\nconst pipeWidth = 100;\r\nconst gravityConstant = 0.15;\r\nconst flapVelocity = -6.25;\r\nconst birdSize = 40;\r\nconst nomNomSize = 10;\r\nconst mp3DingUrl = 'https://freesound.org/data/previews/341/341695_5858296-lq.mp3';\r\nconst mp3FlapUrl = 'https://freesound.org/data/previews/244/244980_3008343-lq.mp3';\r\n\r\nconst colliding = (object: {x: number, y: number, width: number, height: number, isPipe: boolean}, bird: BirdProps) => {\r\n    // calculate horizontal collision\r\n    let horizontalCollision = false;\r\n    const leftObject = object.x;\r\n    const rightObject = object.x + pipeWidth;\r\n    const leftBird = bird.x;\r\n    const rightBird = bird.x + birdSize;\r\n    if (rightBird > leftObject && leftBird < rightObject) horizontalCollision = true;\r\n    // calculate vertical collision\r\n    let verticalCollision = false;\r\n    if (object.isPipe) {\r\n        const halfGap = pipeYGap / 2;\r\n        const topPipeBottom = object.y - halfGap;\r\n        const bottomPipeTop = object.y + halfGap;\r\n        const topBird = bird.y;\r\n        const bottomBird = bird.y + birdSize;\r\n        if (topBird < topPipeBottom || bottomBird > bottomPipeTop) verticalCollision = true;\r\n    } else {\r\n        const topObject = object.y;\r\n        const bottomObject = object.y + object.height;\r\n        const topBird = bird.y;\r\n        const bottomBird = bird.y + birdSize;\r\n        if (bottomBird > topObject && topBird < bottomObject) verticalCollision = true;\r\n    }\r\n    // bird and pipe are colliding if both horizontal and vertical collision occur\r\n    return horizontalCollision && verticalCollision;\r\n};\r\n\r\nclass NomNomProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n}\r\n\r\nclass NomNom extends React.Component {\r\n\r\n    props: NomNomProps;\r\n\r\n    constructor(props: NomNomProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        const halfNomNomSize = nomNomSize / 2;\r\n        return (\r\n            <div>\r\n                <div className=\"nomnom\" style={{position:'absolute',\r\n                    width:`${nomNomSize}px`, height:`${nomNomSize}px`,\r\n                    top:`${this.props.y - halfNomNomSize}px`,\r\n                    left:`${this.props.x}px`}}>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nclass PipeProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    index: number = 0;\r\n    birdPosition: BirdProps = new BirdProps(0, 0);\r\n    onNomNom: any;\r\n    constructor(x: number, y: number, index: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nclass Pipe extends React.Component {\r\n\r\n    nomNomEaten: boolean = false;\r\n    nomNomProps: NomNomProps;\r\n    props: PipeProps;\r\n\r\n    constructor(props: PipeProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.nomNomProps = new NomNomProps();\r\n    }\r\n\r\n    render() {\r\n        const height = window.innerHeight;\r\n        const halfGap = pipeYGap / 2;\r\n        const topPipeTop = (this.props.y - height) - halfGap;\r\n        const bottomPipeTop = this.props.y + halfGap;\r\n        this.nomNomProps.x = this.props.x + (pipeWidth / 2);\r\n        if (this.nomNomProps.y == 0) {\r\n            const topPipeBottom = topPipeTop + height;\r\n            this.nomNomProps.y = topPipeBottom + (Math.random() * (bottomPipeTop - topPipeBottom));\r\n        }\r\n        const object = {\r\n            x: this.nomNomProps.x,\r\n            y: this.nomNomProps.y,\r\n            width: nomNomSize,\r\n            height: nomNomSize,\r\n            isPipe: false\r\n        };\r\n        if (!this.nomNomEaten && colliding(object, this.props.birdPosition)) {\r\n            this.props.onNomNom();\r\n            this.nomNomEaten = true;\r\n        }\r\n        return (\r\n            <div>\r\n                {this.nomNomEaten ? '' : <NomNom x={this.nomNomProps.x} y={this.nomNomProps.y}/>}\r\n                <div className=\"pipe\" style={{ transform:'scale(-1, -1)',\r\n                    top:`${topPipeTop}px`, left:`${this.props.x}px`, width:`${pipeWidth}px`}}></div>\r\n                <div className=\"pipe\" style={{ transform:'scale(-1, 1)',\r\n                    top:`${bottomPipeTop}px`, left:`${this.props.x}px`, width:`${pipeWidth}px`}}></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nclass BirdProps {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nclass Bird extends React.Component {\r\n\r\n    props: BirdProps;\r\n\r\n    constructor(props: BirdProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"bird\"\r\n                style={{left:`${this.props.x}px`, top:`${this.props.y}px`,\r\n                        width:`${birdSize}px`, height:`${birdSize}px`}}></div>\r\n        )\r\n    };\r\n}\r\n\r\nclass FlappyFinchGameState {\r\n    pipePositions: PipeProps[] = [];\r\n    birdPosition: BirdProps = new BirdProps(120, 0);\r\n    birdVelocity: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    collision: boolean = false;\r\n    currentPipeToCheck: number = 1;\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    shouldDing: boolean = false;\r\n    shouldFlap: boolean = false;\r\n    groundX: number = 0;\r\n    skyX: number = 0;\r\n}\r\n\r\nexport default class FlappyFinchGame extends React.Component {\r\n    randomPipePosition = () => (window.innerHeight / 2) + ((Math.random() - 0.5) * (window.innerHeight / 2));\r\n\r\n    state: FlappyFinchGameState;\r\n    props: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = new FlappyFinchGameState();\r\n        this.restart();\r\n        setInterval(() => {\r\n            if (!this.state.paused && !this.state.gameover) {\r\n                this.animate();\r\n            }\r\n        }, frameInterval);\r\n    }\r\n\r\n    restart() {\r\n        this.state = new FlappyFinchGameState();\r\n        const lshs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n        if (!lshs) {\r\n            localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(0));\r\n        }\r\n        this.state.highscore = lshs ? Number(lshs) : 0;\r\n        let x = 3 * pipeXGap;\r\n        let index = 1;\r\n        Array(10).fill(null).forEach(() => {\r\n            this.state.pipePositions.push(new PipeProps(x, this.randomPipePosition(), index));\r\n            x += pipeXGap;\r\n            index++;\r\n        });\r\n        this.setState(this.state);\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        this.setState((state: FlappyFinchGameState) => {\r\n            const k = e.key;\r\n            switch (k) {\r\n                case ' ':\r\n                    state.birdVelocity = flapVelocity;\r\n                    state.shouldFlap = true;\r\n                    break;\r\n                case 'Escape':\r\n                    state.paused = !state.paused;\r\n                    break;\r\n                case 'r':\r\n                case 'R':\r\n                    this.restart();\r\n                    break;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    incrementScore() {\r\n        this.state.score++;\r\n        const lshs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n        if (Number(lshs) < this.state.score) {\r\n            this.state.highscore = this.state.score;\r\n            localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(this.state.highscore));\r\n        }\r\n    }\r\n\r\n    animate() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState((state: FlappyFinchGameState) => {\r\n            state.birdPosition.y += state.birdVelocity;\r\n            state.birdVelocity += gravityConstant;\r\n            state.pipePositions.forEach(pipe => {\r\n                if (state.currentPipeToCheck === pipe.index) {\r\n                    if (pipe.x + pipeWidth < this.state.birdPosition.x) {\r\n                        state.currentPipeToCheck++;\r\n                        this.incrementScore();\r\n                    }\r\n                    const object = {\r\n                        x: pipe.x, y: pipe.y,\r\n                        width: pipeWidth, height: height,\r\n                        isPipe: true\r\n                    };\r\n                    state.gameover = colliding(object, this.state.birdPosition);\r\n                }\r\n                if (pipe.index < state.currentPipeToCheck - 1) {\r\n                    pipe.index = Math.max(...state.pipePositions.map(pos => pos.index)) + 1;\r\n                    pipe.x = Math.max(...state.pipePositions.map(pos => pos.x)) + pipeXGap;\r\n                    pipe.y = this.randomPipePosition();\r\n                }\r\n                pipe.x -= 1;\r\n            });\r\n            [state.groundX, state.skyX] = [state.groundX -1, state.skyX - 0.5];\r\n            if (state.groundX < -width * 0.625) {\r\n                state.groundX = 0;\r\n            }\r\n            if (state.skyX < -width * 0.5) {\r\n                state.skyX = 0;\r\n            }\r\n            if (state.birdPosition.y > height - (birdSize + 50)) {\r\n                state.gameover = true;\r\n            } else if (state.birdPosition.y < 0) {\r\n                state.birdPosition.y = 0;\r\n            }\r\n            const hs = localStorage.getItem('nate314.flappyfinch.highScore');\r\n            let newHighScore = true;\r\n            if (hs && Number(hs) > state.score) newHighScore = false;\r\n            if (newHighScore) {\r\n                localStorage.setItem('nate314.flappyfinch.highScore', JSON.stringify(state.score));\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    nomNomEaten(): void {\r\n        this.incrementScore();\r\n        this.state.shouldDing = true;\r\n    }\r\n \r\n    render() {\r\n        const [ding, flap] = [this.state.shouldDing, this.state.shouldFlap];\r\n        [this.state.shouldDing, this.state.shouldFlap] = [false, false];\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        const pipes = this.state.pipePositions.map(pipe => \r\n            <Pipe x={pipe.x} y={pipe.y} index={pipe.index}\r\n                birdPosition={this.state.birdPosition} onNomNom={() => this.nomNomEaten()}/>\r\n        );\r\n        const gamestatus = (this.state.paused || this.state.gameover || this.state.collision) ?\r\n            <div className=\"paused\">{this.state.gameover ? 'GAME OVER' : 'PAUSED'}</div> : '';\r\n        const ground = Array(5).fill(null).map((v, i) =>\r\n            <div className=\"ground\" \r\n                style={{top:`${height - 50}px`, left:`${this.state.groundX + (i * width * 0.625)}px`, height:'50px',\r\n                color:'white', textAlign:'left', fontSize:'20px'}}></div>\r\n        );\r\n        const sky = Array(5).fill(null).map((v, i) =>\r\n            <div className=\"sky\" style={{left: `${10 + this.state.skyX + (i * width * 0.5)}px`}}></div>\r\n        );\r\n        // const scoreboard =  ;\r\n        return (\r\n            <div className=\"game\">\r\n                {sky}\r\n                <Music url={mp3DingUrl} play={ding}/>\r\n                <Music url={mp3FlapUrl} play={flap}/>\r\n                <Bird x={this.state.birdPosition.x} y={this.state.birdPosition.y}/>\r\n                {pipes}\r\n                {gamestatus}\r\n                {ground}\r\n                {/* {scoreboard} */}\r\n                <div className=\"scoreboard\">\r\n                    &nbsp;&nbsp;&nbsp;Score:&nbsp;{this.state.score}\r\n                    <br />\r\n                    &nbsp;&nbsp;&nbsp;High Score:&nbsp;{this.state.highscore}\r\n                    <br />\r\n                    &nbsp;&nbsp;&nbsp;(r) Reset | (Escape) Pause | (Space) Flap\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport SnakeGame from './Snake';\r\nimport FloatyStars from './FloatyStars';\r\nimport FlappyFinchGame from './FlappyFinch';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst production = true;\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router basename={production ? '/react-games/' : '/'}>\r\n                <Route path=\"/\" exact component = {SnakeGame} />\r\n                <Route path=\"/snake\" exact component = {SnakeGame} />\r\n                <Route path=\"/floatystars\" exact component = {FloatyStars} />\r\n                <Route path=\"/flappyfinch\" exact component = {FlappyFinchGame} />\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}