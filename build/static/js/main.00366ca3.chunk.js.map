{"version":3,"sources":["Snake.tsx","serviceWorker.ts","index.tsx"],"names":["squareSize","arePositionsEqual","p1","p2","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snakeHeadColor","snakeBodyColor","foodColor","boardColor","_this2","squareColors","Array","fill","map","v","rowindex","columnindex","color","snakeBody","forEach","bodyPart","food","snakeHead","onEat","maxWidth","Math","floor","window","innerWidth","maxHeight","innerHeight","min","react_default","a","createElement","row","className","key","concat","style","backgroundColor","width","height","React","Component","ScoreBoard","_this3","score","paused","gameover","highscore","GameState","snakeDirection","snakeHeadPosition","boardHeight","foodPosition","boardWidth","snakeLength","gameTickInterval","Game","_this4","gameTickDelta","snakeLengthDelta","scoreDelta","currentDirection","interval","state","keyDown","e","setState","k","includes","clearInterval","setInterval","gameTick","tempState","_this5","dir","_state$snakeHeadPosit","slicedToArray","y","x","push","length","slice","i","hs","localStorage","getItem","newHighScore","Number","setItem","JSON","stringify","document","addEventListener","_this6","random","isFoodInBody","_this7","isNaN","Snake_Board","eatFood","Snake_ScoreBoard","Boolean","location","hostname","match","ReactDOM","render","Snake_Game","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00366ca3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Snake.css';\r\n\r\nconst boardWidth = 30;\r\nconst boardHeight = 20;\r\nlet squareSize = 0;\r\nconst randomPosition = () => [Math.floor(Math.random() * boardHeight), Math.floor(Math.random() * boardWidth)];\r\nconst arePositionsEqual = (p1: number[], p2: number[]) => p1[0] === p2[0] && p1[1] === p2[1];\r\n\r\nclass BoardProps {\r\n    snakeBody: number[][] = [];\r\n    snakeHead: number[] = [];\r\n    food: number[] = [];\r\n    onEat: any;\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    snakeHeadColor = 'blue';\r\n    snakeBodyColor = 'green';\r\n    foodColor = 'red';\r\n    boardColor = 'black';\r\n    props: BoardProps;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        // building array to figure out the color for each square\r\n        const squareColors: string[][] = Array(boardHeight).fill(null).map((v, rowindex) =>\r\n            Array(boardWidth).fill(null).map((v, columnindex) => {\r\n                let color;\r\n                this.props.snakeBody.forEach(bodyPart => {\r\n                    if (arePositionsEqual(bodyPart, [rowindex, columnindex]))\r\n                        color = this.snakeBodyColor;\r\n                });\r\n                if (arePositionsEqual(this.props.food, [rowindex, columnindex]))\r\n                    color = this.foodColor;\r\n                else if (arePositionsEqual(this.props.snakeHead, [rowindex, columnindex]))\r\n                    color = this.snakeHeadColor;\r\n                else if (!color)\r\n                    color = this.boardColor;\r\n                return color;\r\n            })\r\n        );\r\n        // trigger onEat event if the head is on top of food\r\n        if (arePositionsEqual(this.props.snakeHead, this.props.food)) this.props.onEat();\r\n        // calculating square size\r\n        const maxWidth = Math.floor((window.innerWidth - 100) / boardWidth);\r\n        const maxHeight = Math.floor((window.innerHeight - 100) / boardHeight);\r\n        squareSize = Math.min(maxWidth, maxHeight);\r\n        // return rendered board\r\n        return (\r\n            <div>\r\n                {\r\n                    Array(boardHeight).fill(null).map((row, rowindex) =>\r\n                        <div className=\"board-row\" key={`row-${rowindex}`}>\r\n                            {\r\n                                Array(boardWidth).fill(null).map((row, columnindex) =>\r\n                                    <div className=\"square\" key={`square-${rowindex}-${columnindex}`}\r\n                                        style={\r\n                                            {backgroundColor: squareColors[rowindex][columnindex],\r\n                                            width: `${squareSize}px`, height: `${squareSize}px`}\r\n                                        }>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ScoreBoardProps {\r\n    score: number = 0;\r\n    highscore: number = 0;\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n}\r\n\r\nclass ScoreBoard extends React.Component {\r\n\r\n    props: ScoreBoardProps;\r\n\r\n    constructor(props: ScoreBoardProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"square\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        Score: {this.props.score}\r\n                    </div>\r\n                    <div className=\"square\" style={{width: `${squareSize * (boardWidth / 2)}px`}}>\r\n                        {\r\n                            this.props.paused ?\r\n                            <div style={{color:'green'}}><b>Paused</b></div>\r\n                            : this.props.gameover ?\r\n                            <div style={{color:'red'}}><b>Game Over</b></div>\r\n                            : `High Score: ${this.props.highscore}`\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    <div className=\"square\" style={{width: `${boardWidth * (squareSize)}px`}}>\r\n                        (r) Reset | (WASD, Arrow Keys) move snake | (esc) Escape\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    paused: boolean = false;\r\n    gameover: boolean = false;\r\n    score: number = 0;\r\n    snakeDirection: string = '>';\r\n    snakeHeadPosition: number[] = [boardHeight / 2, 3];\r\n    snakeBody: number[][] = [];\r\n    foodPosition: number[] = [boardHeight / 2, boardWidth / 2];\r\n    snakeLength: number = 1;\r\n    gameTickInterval: number = 110;\r\n}\r\n\r\nexport default class Game extends React.Component {\r\n\r\n    gameTickDelta: number = 0;\r\n    snakeLengthDelta: number = 3;\r\n    scoreDelta: number = 5;\r\n    currentDirection: string;\r\n    interval: any;\r\n    state: GameState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const tempState = new GameState();\r\n        this.state = tempState;\r\n        this.currentDirection = this.state.snakeDirection;\r\n        this.setState(tempState);\r\n        this.interval = setInterval(() => this.gameTick(), this.state.gameTickInterval);\r\n    }\r\n\r\n    gameTick() {\r\n        this.setState((state: GameState) => {\r\n            if (!state.paused && !state.gameover) {\r\n                // move snake in direction set by keyDown method\r\n                const dir = state.snakeDirection;\r\n                this.currentDirection = dir;\r\n                let [y, x] = state.snakeHeadPosition;\r\n                state.snakeBody.push([y, x]);\r\n                x = dir === '<' ? x - 1 : dir === '>' ? x + 1 : x;\r\n                y = dir === '^' ? y - 1 : dir === 'v' ? y + 1 : y;\r\n                // check for collisions and set new positions\r\n                if (y < 0 || y > boardHeight - 1 || x < 0 || x > boardWidth - 1) {\r\n                    state.gameover = true;\r\n                } else {\r\n                    state.snakeHeadPosition = [y, x];\r\n                    state.snakeBody = Array(state.snakeBody.length).fill([-1, -1]).concat(state.snakeBody);\r\n                    state.snakeBody = state.snakeBody.slice(state.snakeBody.length - state.snakeLength);\r\n                    state.snakeBody.forEach((bodyPart, i) => {\r\n                        if (arePositionsEqual(bodyPart, state.snakeHeadPosition)) state.gameover = true;\r\n                    });\r\n                }\r\n                if (state.gameover) {\r\n                    const hs = localStorage.getItem('nate314.snake.highScore');\r\n                    let newHighScore = true;\r\n                    if (hs && Number(hs) > state.score) newHighScore = false;\r\n                    if (newHighScore) {\r\n                        localStorage.setItem('nate314.snake.highScore', JSON.stringify(state.score));\r\n                    }\r\n                }\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        this.setState((state: GameState) => {\r\n            const k = e.key;\r\n            // set the direction based on the key pressed\r\n            state.snakeDirection =\r\n                !['^', 'v'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowUp' || k === 'W' || k === 'w') ? '^' :\r\n                    (k === 'ArrowDown' || k === 'S' || k === 's') ? 'v' : this.currentDirection) :\r\n                !['<', '>'].includes(this.currentDirection) ?\r\n                    ((k === 'ArrowLeft' || k === 'A' || k === 'a') ? '<' :\r\n                    (k === 'ArrowRight' || k === 'D' || k === 'd') ? '>' : this.currentDirection)\r\n                : this.currentDirection;\r\n            if (k === 'Escape') state.paused = !state.paused;\r\n            if (['r', 'R'].includes(k)) {\r\n                clearInterval(this.interval);\r\n                state = new GameState();\r\n                this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    eatFood() {\r\n        this.setState((state: GameState) => {\r\n            // move food and increment the snake's length\r\n            while (true) {\r\n                state.foodPosition = randomPosition();\r\n                let isFoodInBody = false;\r\n                state.snakeBody.forEach(bodyPart => {\r\n                    if (arePositionsEqual(state.foodPosition, bodyPart)) isFoodInBody = true;\r\n                });\r\n                if (!isFoodInBody) break;\r\n            }\r\n            state.snakeLength += this.snakeLengthDelta;\r\n            state.score += this.scoreDelta;\r\n            state.gameTickInterval -= this.gameTickDelta;\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(() => this.gameTick(), state.gameTickInterval);\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let highscore = Number(localStorage.getItem('nate314.snake.highScore'));\r\n        highscore = isNaN(highscore) ? 0 : highscore;\r\n        // show board and scoreboard on the screen\r\n        return (\r\n            <div>\r\n                <Board\r\n                    snakeBody={this.state.snakeBody}\r\n                    snakeHead={this.state.snakeHeadPosition}\r\n                    food={this.state.foodPosition}\r\n                    onEat={() => this.eatFood()}\r\n                />\r\n                <ScoreBoard\r\n                    score={this.state.score}\r\n                    highscore={highscore}\r\n                    paused={this.state.paused}\r\n                    gameover={this.state.gameover}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Snake';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}